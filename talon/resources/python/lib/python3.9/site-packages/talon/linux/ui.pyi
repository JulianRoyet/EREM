from _typeshed import Incomplete
from talon import app as app, events as events, screen as screen
from talon.linux.xclient import WindowInfo as WindowInfo, xclient as xclient
from talon.screen import Screen as Screen, main_screen as main_screen, screen_containing as screen_containing, screens as screens
from talon.scripting import Dispatch as Dispatch
from talon.system import launch as launch
from talon.ui import BaseApp as BaseApp, BaseAppStub as BaseAppStub, BaseMonitor as BaseMonitor, BaseWindow as BaseWindow, BaseWindowStub as BaseWindowStub, Rect as Rect, UIErr as UIErr
from typing import Any, Sequence

class Mon(BaseMonitor):
    active_app: App
    NoApp: Incomplete
    def __init__(self) -> None: ...
    def wait_ready(self) -> None: ...
    def filter(self, array: Sequence, **query: str) -> Sequence: ...
    def apps(self, **query: Any) -> Sequence['App']: ...
    def windows(self, **query: Any) -> Sequence['Window']: ...
    def workspaces(self) -> int: ...
    def active_workspace(self) -> int: ...
    def switch_workspace(self, value: int) -> None: ...

class App(BaseApp):
    NoWindow: Incomplete
    mon: Incomplete
    pid: Incomplete
    active_window: Incomplete
    cmdline: Incomplete
    name: Incomplete
    path: str
    bundle: str
    background: bool
    created_at: Incomplete
    def __init__(self, mon: Mon, info: WindowInfo) -> None: ...
    def quit(self) -> None: ...
    def update(self, info: WindowInfo) -> None: ...
    def focus(self) -> bool: ...
    def windows(self) -> Sequence['Window']: ...

class Window(BaseWindow):
    mon: Incomplete
    app: Incomplete
    hidden: bool
    def __init__(self, mon: Mon, app: App, info: WindowInfo) -> None: ...
    id: Incomplete
    title: Incomplete
    def update(self, info: WindowInfo) -> None: ...
    @property
    def workspace(self) -> int: ...
    @workspace.setter
    def workspace(self, value: int): ...
    @property
    def rect(self) -> Rect: ...
    @rect.setter
    def rect(self, value: Rect): ...
    def move(self, x: float, y: float) -> None: ...
    def resize(self, width: float, height: float) -> None: ...
    def focus(self) -> bool: ...
    @property
    def screen(self) -> Screen: ...

class AppStub(BaseAppStub):
    mon: Incomplete
    active_window: Incomplete
    def __init__(self, mon: Mon) -> None: ...

class WindowStub(BaseWindowStub):
    mon: Incomplete
    app: Incomplete
    def __init__(self, mon: Mon, app: App) -> None: ...

apps: Incomplete
windows: Incomplete
register: Incomplete
unregister: Incomplete
workspaces: Incomplete
active_workspace: Incomplete
switch_workspace: Incomplete

def active_app() -> App: ...
def active_window() -> Window: ...
def proxy_screen_change(topic: str, _): ...
