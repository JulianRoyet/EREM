import threading
from _typeshed import Incomplete
from talon import screen as screen
from talon.debug import log_exception as log_exception
from talon.scripting import Dispatch as Dispatch
from talon.types import Rect as Rect
from typing import Dict, List, Optional
from xcffib import xproto

class KeysymCode:
    index: int
    code: int
    def __lt__(self, other): ...
    def __init__(self, index, code) -> None: ...

class WindowInfo:
    id: int
    name: str
    pid: Optional[int]
    wm_instance: str
    wm_class: str
    rect: Rect
    workspace: int
    def __init__(self, id, name, pid, wm_instance, wm_class, rect, _frame, workspace) -> None: ...

class XClient(Dispatch):
    clipboard_serial: int
    selection_serial: int
    focused_id: Optional[int]
    windows: Dict[int, WindowInfo]
    lock: threading.RLock
    keycode_to_keysyms: Dict[int, List[int]]
    keysym_to_keycodes: Dict[int, List[KeysymCode]]
    conn: Incomplete
    setup: Incomplete
    core: Incomplete
    xtest: Incomplete
    xfixes: Incomplete
    xinput: Incomplete
    randr: Incomplete
    screen: Incomplete
    root: Incomplete
    thread: Incomplete
    def __init__(self) -> None: ...
    def start(self) -> None: ...
    def atom(self, name: str) -> int: ...
    def flush(self) -> None: ...
    def get_property(self, window: int, atom: int): ...
    def send_root_event(self, window: int, event: int, *data, propagate: bool = ...) -> None: ...
    def get_window_name(self, win_id: int) -> str: ...
    def get_window_class(self, win_id: int) -> tuple[str, str]: ...
    def get_window_pid(self, win_id: int) -> Optional[int]: ...
    def get_window_desktop(self, win_id: int) -> int: ...
    def get_window_rect(self, win_id: int, *, rect: Rect = ...) -> tuple[Rect, Rect]: ...
    def get_window_info(self, win_id: int) -> WindowInfo: ...
    def register_window_events(self, win_id: int) -> None: ...
    def update_keymap(self, *, min_keycode: int = ..., count: int = ...) -> None: ...
    def mapping_notify_event(self, event: xproto.MappingNotifyEvent): ...
    def update_screens(self) -> None: ...
    def update_windows(self) -> None: ...
    def update_order(self) -> None: ...
    def update_focus(self) -> None: ...
    def update_desktop(self) -> None: ...
    def update_desktop_count(self) -> None: ...
    def window_title_change_event(self, event: xproto.PropertyNotifyEvent): ...
    def window_desktop_change_event(self, event: xproto.PropertyNotifyEvent): ...
    def window_configure_event(self, event: xproto.ConfigureNotifyEvent): ...
    def run(self) -> None: ...

xclient: Incomplete
