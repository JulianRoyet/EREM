import threading
from _typeshed import Incomplete
from talon import cron as cron
from talon.api import ffi as ffi, lib as lib
from talon.debug import log_exception as log_exception
from talon.lib.keys import Key as Key, parse_keys as parse_keys
from talon.linux import ctrl as ctrl, xkb as xkb
from talon.linux.xclient import xclient as xclient
from talon.scripting.hotkey_system import BaseHotkeySystem as BaseHotkeySystem
from typing import Optional

MODS: Incomplete
VARIANTS: Incomplete
VARIANT_MASK_LIST: Incomplete
VARIANT_MASK: Incomplete
EVENT_MOD_MASK: Incomplete

class Mapping:
    id: tuple[int, int]
    keystr: str
    key: Key
    canonical: str
    code: int
    mod_mask: int
    def __init__(self, id, keystr, key, canonical, code, mod_mask) -> None: ...

def map_key(keystr: str) -> Mapping: ...

class HotkeySystem(BaseHotkeySystem):
    lock: threading.RLock
    mappings: dict[tuple[int, int], Mapping]
    active_hotkeys: set[Mapping]
    repeating: set[Mapping]
    job: Optional[cron.Job]
    conn: Incomplete
    setup: Incomplete
    core: Incomplete
    screen: Incomplete
    root: Incomplete
    xkb: Incomplete
    thread: Incomplete
    def __init__(self) -> None: ...
    def tick(self) -> None: ...
    def event_loop(self) -> None: ...
    def bind(self, mapping: Mapping) -> None: ...
    def unbind(self, mapping: Mapping) -> None: ...
    def update(self) -> None: ...
