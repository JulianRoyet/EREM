import io

class XI_Event:
    def pack(self, first_event: int) -> bytes: ...

class XI_FakeInputEvent(XI_Event):
    type: int
    detail: int
    time: int
    root: int
    rootX: int
    rootY: int
    deviceid: int
    def pack(self, first_event: int) -> bytes: ...
    def __init__(self, type, detail, time, root, rootX, rootY, deviceid) -> None: ...

class XI_FakeDeviceMotionNotifyEvent(XI_Event):
    relative: bool
    time: int
    root: int
    rootX: int
    rootY: int
    deviceid: int
    def pack(self, first_event: int) -> bytes: ...
    def __init__(self, relative, time, root, rootX, rootY, deviceid) -> None: ...

class XI_DeviceValuatorEvent(XI_Event):
    deviceid: int
    first_valuator: int
    valuators: list[int]
    def pack(self, first_event: int) -> bytes: ...
    def __init__(self, deviceid, first_valuator, valuators) -> None: ...

def XI_PackEvents(first_event: int, *events: XI_Event) -> io.BytesIO: ...
