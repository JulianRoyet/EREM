from _typeshed import Incomplete
from talon import constants as constants, cron as cron, settings as settings
from talon.api import ffi as ffi, lib as lib
from talon.lib import cubeb as cubeb
from talon.plugins.microphone import manager as manager
from talon.scripting import dispatch as dispatch, rctx as rctx
from typing import Any, Callable, Optional, Sequence

async_queue: Incomplete

def async_call(fn: Callable[[], Any]) -> cron.Job: ...

class VadErr(Exception): ...

class VadStream:
    ctx: Incomplete
    vad: Incomplete
    stream: Incomplete
    callback: Incomplete
    def __init__(self, device: Optional[cubeb.DeviceInfo], config: ffi.CData, callback: Callable[[Sequence[float], float], None]) -> None: ...
    def set_config(self, config: ffi.CData): ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...

class Vad:
    stream: Optional[VadStream]
    config: Incomplete
    callback: Incomplete
    lock: Incomplete
    def __init__(self, mic: Optional[cubeb.DeviceInfo], callback: Callable[[Sequence[float], float], None], rate: int = ..., mode: int = ..., pre_time: float = ..., timeout: float = ..., min_time: float = ..., rnn_threshold: float = ...) -> None: ...
    def set_timeout(self, value: float) -> None: ...
    def set_threshold(self, value: float) -> None: ...
    def set_debug(self, value: bool) -> None: ...
    mic: Incomplete
    def set_microphone(self, mic: Optional[cubeb.DeviceInfo]) -> None: ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...
