from talon.mac.ui import *
from talon.linux.ui import *
from talon.windows.ui import *
import abc
from .app import platform as platform
from abc import ABC, abstractmethod
from datetime import datetime, timedelta
from talon import skia as skia
from talon.api import ffi as ffi, lib as lib
from talon.mac.ui import App as App, Window as Window, register as register
from talon.screen import Screen as Screen, main_screen as main_screen, screen_containing as screen_containing, screens as screens
from talon.scripting import Dispatch as Dispatch
from talon.types import Point2d as Point2d, Rect as Rect
from typing import Any, Callable, Sequence

class UIErr(Exception): ...

class BaseMonitor(Dispatch, ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def wait_ready(self) -> None: ...
    @abstractmethod
    def apps(self, **query: Any) -> Sequence['BaseApp']: ...
    @abstractmethod
    def windows(self, **query: Any) -> Sequence['BaseWindow']: ...
    @abstractmethod
    def workspaces(self) -> int: ...
    @abstractmethod
    def active_workspace(self) -> int: ...
    @abstractmethod
    def switch_workspace(self, value: int) -> None: ...

class BaseApp(ABC, metaclass=abc.ABCMeta):
    pid: int
    name: str
    company: str
    path: str
    exe: str
    bundle: str
    cmdline: Sequence[str]
    background: bool
    created_at: datetime
    @property
    def runtime(self) -> timedelta: ...
    @property
    def icon(self) -> skia.Image: ...
    @abstractmethod
    def quit(self) -> None: ...
    @abstractmethod
    def focus(self) -> bool: ...
    @abstractmethod
    def windows(self) -> Sequence['BaseWindow']: ...

class BaseAppStub(BaseApp):
    @property
    def icon(self) -> None: ...
    def quit(self) -> None: ...
    def focus(self) -> None: ...
    def windows(self) -> Sequence['BaseWindow']: ...
    def __bool__(self): ...

class BaseWindow(ABC, metaclass=abc.ABCMeta):
    id: int
    title: str
    doc: str
    hidden: bool
    @property
    @abstractmethod
    def workspace(self) -> int: ...
    @workspace.setter
    def workspace(self, value: int): ...
    @property
    @abstractmethod
    def rect(self) -> Rect: ...
    @rect.setter
    def rect(self, value: Rect): ...
    @property
    @abstractmethod
    def screen(self) -> Screen: ...
    @abstractmethod
    def move(self, x: float, y: float) -> None: ...
    @abstractmethod
    def resize(self, width: float, height: float) -> None: ...
    @abstractmethod
    def focus(self) -> bool: ...

class BaseWindowStub(BaseWindow):
    @property
    def workspace(self) -> int: ...
    @workspace.setter
    def workspace(self, value: int) -> None: ...
    @property
    def rect(self) -> Rect: ...
    @rect.setter
    def rect(self, rect: Rect) -> None: ...
    @property
    def screen(self) -> Screen: ...
    def move(self, x: float, y: float) -> None: ...
    def resize(self, width: float, height: float) -> None: ...
    def focus(self) -> bool: ...
    def __bool__(self): ...

register: Callable[[str, Callable], None]
