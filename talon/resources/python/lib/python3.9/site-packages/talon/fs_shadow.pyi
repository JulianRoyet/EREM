import os
from _typeshed import Incomplete
from typing import Any, Dict, Iterator, List, Set, Union

FsEntry: Incomplete

class FsEvent:
    path: str
    stat: os.stat_result
    def __init__(self, path: str, stat: os.stat_result) -> None: ...

class FsCreate(FsEvent): ...
class FsModify(FsEvent): ...
class FsRemove(FsEvent): ...

class FsFile:
    parent: Union['FsDir', 'FsShadow']
    path: str
    stat: os.stat_result
    def __init__(self, parent: Union['FsDir', 'FsShadow'], path: str, st: os.stat_result = ...) -> None: ...
    def scan(self, parents: Set[str] = ...) -> None: ...
    def rescan(self, recursive: bool = ..., parents: Set[str] = ...) -> Iterator[FsEvent]: ...
    def create_events(self) -> Iterator[FsEvent]: ...
    def all_entries(self) -> List[FsEntry]: ...
    def __eq__(self, other): ...

class FsDir:
    parent: Union[FsEntry, 'FsShadow']
    path: str
    stat: os.stat_result
    entries: Dict[str, FsEntry]
    def __init__(self, parent: Union[FsEntry, 'FsShadow'], path: str, st: os.stat_result = ...) -> None: ...
    def add_entry(self, entry: os.DirEntry, *, parents: Set[str] = ...) -> FsEntry: ...
    def remove(self, entry: FsEntry) -> None: ...
    def create_events(self) -> Iterator[FsEvent]: ...
    def scan(self, parents: Set[str] = ...) -> None: ...
    def rescan(self, *, recursive: bool = ..., parents: Set[str] = ...) -> Iterator[FsEvent]: ...
    def all_entries(self) -> List[FsEntry]: ...
    def __eq__(self, other: Any) -> bool: ...
    def dump(self, indent: str = ...) -> str: ...

class FsShadow:
    entries: Dict[str, FsEntry]
    def __init__(self) -> None: ...
    def rescan(self) -> List[FsEvent]: ...
    def watch(self, path: str) -> None: ...
    def unwatch(self, path: str) -> None: ...
    def remove(self, entry: FsEntry) -> None: ...
    def paths(self) -> List[str]: ...
    def all_entries(self) -> List[FsEntry]: ...
    def all_paths(self) -> List[str]: ...
    def entry_map(self) -> Dict[str, FsEntry]: ...
    def get_events(self, path: str) -> List[FsEvent]: ...
    def dump(self): ...
