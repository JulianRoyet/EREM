import socket
from . import AbstractEngine as AbstractEngine, EngineError as EngineError, EngineStatus as EngineStatus, GrammarStatus as GrammarStatus, WordMeta as WordMeta
from _typeshed import Incomplete
from collections import defaultdict as defaultdict
from talon import app as app, cron as cron, debug as debug, metrics as metrics
from talon.api import ffi as ffi, lib as lib
from talon.debug import log_exception as log_exception
from talon.grammar import Grammar as Grammar
from talon.lib import mbson as mbson
from talon.lib.cubeb import DeviceInfo as DeviceInfo
from talon.scripting import Dispatch as Dispatch
from talon.windows import winevents as winevents
from talon.windows.named_pipe import PipeFile as PipeFile
from typing import Callable, Dict, Iterable, Optional, Sequence, Union

msghdr: Incomplete
ObjectCallback = Callable[[Dict], None]
SocketType = Union[socket.socket, PipeFile]

class masked_bytes(bytes): ...

class DraconityClient(Dispatch):
    @staticmethod
    def connect_socket(host: str, port: int) -> socket.socket: ...
    @staticmethod
    def connect_pipe(path: str) -> SocketType: ...
    @classmethod
    def with_server(cls, host: str, port: int, secret: str) -> DraconityClient: ...
    @classmethod
    def with_pipe(cls, path: str, secret: str) -> DraconityClient: ...
    @classmethod
    def with_config(cls, config_path: str = ...) -> DraconityClient: ...
    connector: Incomplete
    secret: Incomplete
    run: bool
    connected: bool
    tid_counter: Incomplete
    reply_funcs: Incomplete
    debug: bool
    def __init__(self, connector: Callable[[], 'SocketType'], secret: str) -> None: ...
    s: Incomplete
    def connect(self) -> None: ...
    def shutdown(self) -> None: ...
    def close(self) -> None: ...
    def call_async(self, obj: Dict, cb: ObjectCallback, forced: bool = ...) -> None: ...
    def call(self, obj: Dict, forced: bool = ...) -> Optional[Dict]: ...
    def recv(self, size): ...
    def thread_main(self) -> None: ...
    def pump(self) -> None: ...

class DragonEngine(AbstractEngine):
    name: str
    id: str
    client: Incomplete
    lock: Incomplete
    grammars: Incomplete
    grammar_blobs: Incomplete
    grammar_status: Incomplete
    ready: bool
    def __init__(self, client: DraconityClient) -> None: ...
    @staticmethod
    def ts() -> int: ...
    def close(self) -> None: ...
    def on_publish(self, topic: str, msg: Optional[Dict]) -> None: ...
    def status(self) -> EngineStatus: ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...
    def set_microphone(self, device: Optional[DeviceInfo]) -> None: ...
    def cmd_sync(self, cmd: str, **msg) -> Dict: ...
    def cmd_async(self, cmd: str, cb: ObjectCallback = ..., **msg) -> None: ...
    def cmd(self, cmd: str, **msg) -> None: ...
    def mimic(self, phrase: Sequence[str]) -> None: ...
    def sync_grammar(self, grammar: Grammar) -> None: ...
    def unload_grammar(self, grammar: Grammar) -> None: ...
    def set_vocab(self, words: Iterable[str]) -> None: ...
