from . import AbstractEngine as AbstractEngine, EngineError as EngineError, EngineStatus as EngineStatus, GrammarStatus as GrammarStatus
from _typeshed import Incomplete
from talon.grammar import Grammar as Grammar
from talon.lib.cubeb import DeviceInfo as DeviceInfo
from typing import Iterable, Optional, Sequence

class DummyEngine(AbstractEngine):
    name: Incomplete
    id: str
    enabled: bool
    grammars: Incomplete
    grammar_status: Incomplete
    lists: Incomplete
    language: Incomplete
    def __init__(self, name: str = ..., language: str = ...) -> None: ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...
    def set_microphone(self, device: Optional[DeviceInfo]) -> None: ...
    def status(self) -> EngineStatus: ...
    def mimic(self, phrase: Sequence[str]) -> None: ...
    def sync_grammar(self, grammar: Grammar) -> None: ...
    def unload_grammar(self, grammar: Grammar) -> None: ...
    def set_vocab(self, words: Iterable[str]) -> None: ...
    def close(self) -> None: ...
