from _typeshed import Incomplete
from talon import app as app
from talon.api import ffi as ffi, ffi_string as ffi_string, lib as lib
from talon.lib.time import sleep as sleep
from talon.skia import Image as Image
from typing import Any, Generator, Optional

class MimeData:
    handle: Incomplete
    def __init__(self, handle: ffi.CData = ...) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __neq__(self, other: Any) -> bool: ...
    def __getitem__(self, key: str) -> bytes: ...
    def __setitem__(self, key: str, value: bytes) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def clear(self) -> None: ...
    @property
    def formats(self) -> list[str]: ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    def text(self) -> None: ...
    @property
    def html(self) -> str: ...
    @html.setter
    def html(self, value: str) -> None: ...
    def html(self) -> None: ...
    @property
    def image(self) -> Image: ...
    @image.setter
    def image(self, value: Image) -> None: ...
    def image(self) -> None: ...
    @property
    def urls(self) -> list[str]: ...
    @urls.setter
    def urls(self, urls: list[str]) -> None: ...
    def urls(self) -> None: ...
    @property
    def color(self) -> str: ...
    @color.setter
    def color(self, value: str) -> None: ...
    def color(self, value: str) -> None: ...
    def __del__(self) -> None: ...

def has_mode(mode: str = ...) -> bool: ...
def mime(*, mode: str = ..., tries: int = ..., formats: list[str] = ...) -> Optional[MimeData]: ...
def set_mime(mime: MimeData, *, mode: str = ...) -> None: ...
def text(*, mode: str = ...) -> Optional[str]: ...
def set_text(s: str, *, mode: str = ...) -> None: ...
def get() -> Optional[str]: ...
def set(s: str): ...
def image(*, mode: str = ...) -> Optional[Image]: ...
def set_image(image: Image, *, mode: str = ...) -> None: ...
def clear(*, mode: str = ...) -> None: ...
def serial(*, mode: str = ...) -> int: ...
def await_change(timeout: float = ..., *, after: int = ..., old: MimeData = ..., mode: str = ...) -> Optional[MimeData]: ...

class NoChange(Exception): ...

class ChangePromise:
    data: Optional[MimeData]
    complete: bool
    def __bool__(self) -> bool: ...
    def mime(self) -> MimeData: ...
    def text(self) -> str: ...
    def get(self) -> str: ...

def revert(*, old: MimeData = ..., mode: str = ...) -> Generator[None, None, None]: ...
def capture(timeout: float = ..., *, inc: int = ..., mode: str = ...) -> Generator[ChangePromise, None, None]: ...
