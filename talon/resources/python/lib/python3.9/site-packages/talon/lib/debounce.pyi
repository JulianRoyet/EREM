from typing import Any, Callable, Optional, TypeVar

T = TypeVar('T')
DecoratedT = TypeVar('DecoratedT', bound=Callable[[], Any])
DecoratorType = Callable[[DecoratedT], DecoratedT]

class CacheEntry:
    value: Any
    expiry: float
    def __init__(self, value, expiry) -> None: ...

class Cache:
    timeout: float
    entry: Optional[CacheEntry]
    def clear(self) -> None: ...
    def __init__(self, timeout, entry) -> None: ...

def wrap(timeout: float = ...) -> DecoratorType: ...
