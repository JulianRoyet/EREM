import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from typing import Any, Callable, Pattern, Tuple, Union

re_Pattern: Incomplete

def warn_key(src: str, dst: str, value: Any): ...

class Match(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def apply(self, scope) -> bool: ...
    @abstractmethod
    def keys(self) -> Tuple[str, ...]: ...
    @abstractmethod
    def __eq__(self, other: object) -> bool: ...
    def __and__(self, other: object) -> Match: ...
    def __or__(self, other: object) -> Match: ...
    def __invert__(self) -> Match: ...

class MatchAny(Match):
    def apply(self, scope) -> bool: ...
    def keys(self) -> Tuple[str, ...]: ...
    def __eq__(self, other: object) -> bool: ...

class MatchString(Match):
    key: str
    value: str
    def __init__(self, key: str, value: str) -> None: ...
    def keys(self) -> Tuple[str, ...]: ...
    def apply(self, scope) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class MatchRegex(Match):
    key: str
    pattern: str
    flags: str
    regex: Incomplete
    def __init__(self, key: str, regex: Union[str, Pattern], flags: str = ...) -> None: ...
    def keys(self) -> Tuple[str, ...]: ...
    def apply(self, scope) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class MatchLambda(Match):
    key: Incomplete
    cb: Incomplete
    def __init__(self, key: str, cb: Callable[[Any], bool]) -> None: ...
    def keys(self) -> Tuple[str, ...]: ...
    def apply(self, scope) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class MatchAnd(Match):
    a: Incomplete
    b: Incomplete
    def __init__(self, a: Match, b: Match) -> None: ...
    def keys(self) -> Tuple[str, ...]: ...
    def apply(self, scope) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class MatchOr(Match):
    a: Incomplete
    b: Incomplete
    def __init__(self, a: Match, b: Match) -> None: ...
    def keys(self) -> Tuple[str, ...]: ...
    def apply(self, scope) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class MatchNot(Match):
    match: Incomplete
    def __init__(self, match: Match) -> None: ...
    def keys(self) -> Tuple[str, ...]: ...
    def apply(self, scope) -> bool: ...
    def __invert__(self) -> Match: ...
    def __eq__(self, other: object) -> bool: ...

def M(*args, **kwargs) -> Match: ...
