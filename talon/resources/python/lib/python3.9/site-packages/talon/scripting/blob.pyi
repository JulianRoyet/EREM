from pathlib import Path
from typing import BinaryIO, Iterator, TextIO, overload

class BlobStorage:
    dst: Path
    src: list[Path]
    remotes: list[str]
    def __init__(self, dst: str, src: list[str], remotes: list[str]) -> None: ...
    def find(self, sha256: str) -> Path: ...
    def __contains__(self, sha256: str) -> bool: ...
    def __iter__(self) -> Iterator[str]: ...
    def selfcheck(self) -> Iterator[str]: ...
    @overload
    def open(self, sha256: str, *, verify: bool = ...) -> BinaryIO: ...
    @overload
    def open(self, sha256: str, *, encoding: str, verify: bool = ...) -> TextIO: ...
    def put(self, path: str, *, sha256: str = ..., move: bool = ...) -> str: ...
    @overload
    def get(self, sha256: str, *, verify: bool = ...) -> bytes: ...
    @overload
    def get(self, sha256: str, *, encoding: str, verify: bool = ...) -> str: ...
    def delete(self, sha256: str) -> None: ...
    def remote_urls(self, sha256: str) -> Iterator[str]: ...
