from _typeshed import Incomplete
from contextvars import ContextVar
from lark import Transformer, Tree
from talon.debug import log_exception as log_exception
from talon.scripting import type_check as type_check
from talon.scripting.actions import ActionPath as ActionPath
from typing import Any, Dict, List, Optional, Sequence, Tuple, Union

grammar: str
fstring_re: Incomplete
fstring_split_re: Incomplete

class Expr:
    def get(self, vm: TalonScriptVM) -> Any: ...
    def check(self, vm: TalonScriptVM) -> Tuple[Any, List[str]]: ...
    def __python__(self) -> str: ...

class Statement(Expr):
    def run(self, vm: TalonScriptVM) -> Any: ...

class Comment(Statement):
    text: Incomplete
    def __init__(self, text: str) -> None: ...
    def run(self, vm: TalonScriptVM) -> Any: ...
    def check(self, vm: TalonScriptVM) -> Tuple[Any, List[str]]: ...
    def __python__(self) -> str: ...

class ExprOp(Expr):
    op: str
    v1: Any
    v2: Any
    def __init__(self, v1, v2) -> None: ...
    def check(self, vm: TalonScriptVM) -> Tuple[Any, List[str]]: ...

class ExprAdd(ExprOp):
    op: str
    def get(self, vm: TalonScriptVM): ...

class ExprSub(ExprOp):
    op: str
    def get(self, vm: TalonScriptVM): ...

class ExprMul(ExprOp):
    op: str
    def get(self, vm: TalonScriptVM): ...

class ExprDiv(ExprOp):
    op: str
    def get(self, vm: TalonScriptVM): ...

class ExprMod(ExprOp):
    op: str
    def get(self, vm: TalonScriptVM): ...

class ExprOr(ExprOp):
    op: str
    def get(self, vm: TalonScriptVM): ...
    def check(self, vm: TalonScriptVM) -> Tuple[Any, List[str]]: ...
    def __python__(self) -> str: ...

def expr(v1, op, v2): ...

class Value(Expr):
    value: Any
    def get(self, vm: TalonScriptVM): ...
    def check(self, vm: TalonScriptVM) -> Tuple[type, List[str]]: ...

class StringValue(Value):
    value: str
    def __init__(self, value: str) -> None: ...

class KeyValue(StringValue): ...

class FormatStringValue(Value):
    value: str
    parts: list[Expr]
    def __init__(self, value: str): ...
    def check(self, vm: TalonScriptVM) -> Tuple[type, List[str]]: ...
    def get(self, vm: TalonScriptVM): ...
    def __python__(self) -> str: ...

class NumberValue(Value):
    value: Union[int, float]
    def __init__(self, value: str) -> None: ...

class Variable(Expr):
    name: str
    def __init__(self, name: str) -> None: ...
    def get(self, vm: TalonScriptVM): ...
    def check(self, vm: TalonScriptVM) -> Tuple[type, List[str]]: ...

class Action(Statement):
    name: str
    args: Sequence[Expr]
    def __init__(self, name: str, *args: Expr) -> None: ...
    def get(self, vm: TalonScriptVM): ...
    def run(self, vm: TalonScriptVM): ...
    def check(self, vm: TalonScriptVM) -> Tuple[type, List[str]]: ...
    def __python__(self) -> str: ...

class KeyStatement(Statement):
    keys: Sequence[StringValue]
    def __init__(self, keys: Sequence[StringValue]) -> None: ...
    def run(self, vm: TalonScriptVM): ...
    def check(self, vm: TalonScriptVM) -> Tuple[Optional[type], List[str]]: ...
    def __python__(self) -> str: ...

class Sleep(Action):
    args: Sequence[Value]
    def __python__(self) -> str: ...

class Repeat(Statement):
    value: Value
    def __init__(self, value: Value) -> None: ...
    def run(self, vm: TalonScriptVM): ...
    def check(self, vm: TalonScriptVM) -> Tuple[type, List[str]]: ...
    def __python__(self) -> None: ...

class Assignment(Statement):
    var: str
    expr: Expr
    def __init__(self, var: str, expr: Expr) -> None: ...
    def run(self, vm: TalonScriptVM): ...
    def check(self, vm: TalonScriptVM) -> Tuple[type, List[str]]: ...

class TreeWalker(Transformer):
    def start(self, args): ...
    def line(self, args): ...
    def auto_insert(self, args): ...
    def key(self, tokens): ...
    def sleep(self, spec): ...
    def repeat(self, args): ...
    def comment(self, args): ...
    def action(self, args): ...
    def assignment(self, args): ...
    def args(self, args): ...
    def expr(self, args): ...
    def value(self, args): ...
    def variable(self, args): ...
    def number(self, args): ...
    def string(self, args): ...

parser: Incomplete
location_var: ContextVar[str]

class TalonScriptError(Exception):
    top: Exception
    lines: List[str]
    msg: str
    parent: Incomplete
    def __init__(self, vm: TalonScriptVM, e: Exception) -> None: ...

class TalonScriptVM:
    pc: int
    lines: Sequence[Statement]
    actions: Any
    namespace: Any
    filename: str
    start_line: int
    defaults: Dict[str, Any]
    vars: Dict[str, Any]
    types: Dict[str, type]
    def __init__(self, code: str, lines: Sequence[Statement], actions, *, namespace: Incomplete | None = ..., filename: str = ..., start_line: int = ..., **kwargs) -> None: ...
    def call(self, name: str, *args): ...
    def repeat(self, times: int) -> None: ...
    def get(self, name: str) -> Any: ...
    def set(self, name: str, value: Any) -> None: ...
    def run(self) -> TalonScriptVM: ...
    def get_type(self, name: str) -> Tuple[type, List[str]]: ...
    def set_type(self, name: str, typ: type) -> None: ...
    def check_call(self, name: str, *arg_types: type) -> Tuple[type, List[str]]: ...
    def check(self) -> List[Tuple[int, str]]: ...

class SettingsActions:
    def __getattr__(self, key) -> None: ...
    def __getitem__(self, key) -> None: ...

settings_actions: Incomplete

class TalonScript:
    filename: str
    start_line: int
    code: str
    lines: Sequence[Statement]
    def __init__(self, filename: str, start_line: int, code: str, lines: Sequence[Statement]) -> None: ...
    def run(self, actions, namespace: Incomplete | None = ..., **kwargs) -> TalonScriptVM: ...

class CompileError(Exception): ...

def parse_code(code: str, *, start: str = ..., filename: str = ..., lineno: int = ...) -> Tree: ...
def compile_script(code: str, *, filename: str = ..., lineno: int = ...) -> TalonScript: ...
def transpile_to_python(script: TalonScript) -> str: ...
