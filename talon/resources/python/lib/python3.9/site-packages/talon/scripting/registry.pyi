from .actions import Actions as Actions
from .context import Context as Context
from .module import Module as Module
from .scope import Scope as Scope, ScopeDecl as ScopeDecl
from .settings import Settings as Settings
from .types import ActionDecl as ActionDecl, ActionImpl as ActionImpl, AppDecl as AppDecl, CaptureDecl as CaptureDecl, CaptureImpl as CaptureImpl, CommandImpl as CommandImpl, NameDecl as NameDecl, ScriptImpl as ScriptImpl, SettingDecl as SettingDecl, SettingValue as SettingValue, T as T
from _typeshed import Incomplete
from enum import Enum as Enum
from talon import events as events
from talon.debug import log_exception as log_exception
from talon.scripting import dispatch as dispatch, paths as paths, rctx as rctx
from talon.scripting.types import DuplicateError as DuplicateError, ImmutableClassMeta as ImmutableClassMeta
from typing import Sequence

class Decls:
    actions: dict[str, 'ActionDecl']
    captures: dict[str, 'CaptureDecl']
    scopes: dict[str, 'ScopeDecl']
    settings: dict[str, 'SettingDecl']
    lists: dict[str, 'NameDecl']
    modes: dict[str, 'NameDecl']
    apps: dict[str, set['AppDecl']]
    tags: dict[str, 'NameDecl']
    def __init__(self, actions, captures, scopes, settings, lists, modes, apps, tags) -> None: ...

class Modes(dispatch.Dispatch):
    registry: Incomplete
    lock: Incomplete
    saved: Incomplete
    modes: Incomplete
    def __init__(self, registry: Registry) -> None: ...
    def toggle(self, mode: str): ...
    def enable(self, mode: str): ...
    def disable(self, mode: str): ...
    def save(self) -> None: ...
    def restore(self) -> None: ...

ALL_EVENTS: Incomplete

class Registry(dispatch.Dispatch, metaclass=ImmutableClassMeta):
    modules: dict[int, 'Module']
    contexts: dict[str, 'Context']
    decls: Decls
    all_actions: dict[str, set['ActionImpl']]
    actions: dict[str, list['ActionImpl']]
    captures: dict[str, list['CaptureImpl']]
    commands: dict[str, list['CommandImpl']]
    hotkeys: dict[str, list['ScriptImpl']]
    noises: dict[str, list['ScriptImpl']]
    parrot_noises: dict[str, list['ScriptImpl']]
    face_expressions: dict[str, list['ScriptImpl']]
    settings: dict[str, list['SettingValue']]
    lists: dict[str, list[dict[str, str]]]
    apps: frozenset[str]
    tags: frozenset[str]
    last_active_apps: frozenset[str]
    last_active_contexts: Sequence['Context']
    last_modes: frozenset[str]
    def __init__(self) -> None: ...
    def buffer(self) -> None: ...
    def flush(self) -> None: ...
    def dispatch_decls(self) -> None: ...
    def add_module(self, mod: Module) -> None: ...
    def remove_module(self, mod: Module) -> None: ...
    def refresh_module(self, mod: Module) -> None: ...
    def add_context(self, ctx: Context) -> None: ...
    def remove_context(self, ctx: Context) -> None: ...
    def refresh_context(self, ctx: Context, event: str) -> None: ...
    def active_contexts(self) -> Sequence['Context']: ...
    def active_apps(self) -> set[str]: ...
    def update_contexts(self, *events_hint: str, force: bool = ...) -> None: ...

registry: Incomplete
