from . import Dispatch as Dispatch, rctx as rctx
from .registry import Registry as Registry
from .types import ImmutableClassMeta as ImmutableClassMeta, SettingDecl as SettingDecl, SettingValue as SettingValue
from _typeshed import Incomplete
from typing import Optional, Union

class Settings(Dispatch, metaclass=ImmutableClassMeta):
    registry: Incomplete
    def __init__(self, registry: Registry) -> None: ...
    def lookup(self, path: str) -> SettingDecl: ...
    def __contains__(self, path: str) -> bool: ...
    def __getitem__(self, path: str) -> SettingValue: ...
    def get(self, path: str, default: Union[SettingValue, SettingDecl.NoValueType, None] = ...) -> Optional[SettingValue]: ...
    def list(self) -> None: ...
