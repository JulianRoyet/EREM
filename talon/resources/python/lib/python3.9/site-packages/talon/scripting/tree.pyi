from _typeshed import Incomplete
from typing import Any, Dict, Generator, List, Optional, Sequence, Tuple, Union

TreeKeyType = Union[list, tuple]

class Tree:
    parent: Optional['Tree']
    part: str
    children: Dict[str, 'Tree']
    siblings: List['Tree']
    def __init__(self, parent: Tree = ..., part: str = ...) -> None: ...
    def collect(self) -> None: ...
    def add(self, key: TreeKeyType, value: Any) -> None: ...
    def remove(self, key: TreeKeyType, value: Any) -> bool: ...
    def clear(self, key: TreeKeyType) -> bool: ...
    def get(self, key: TreeKeyType, partial: bool = ...) -> List[Tuple[Sequence, Sequence]]: ...
    def walk(self, topdown: bool = ...) -> Generator[Tuple[List[str], Sequence[Any]], None, None]: ...
    def paths(self) -> List[Sequence]: ...

class PathTree:
    delim: Incomplete
    tree: Incomplete
    def __init__(self, delim: str) -> None: ...
    def split(self, path: str) -> List[str]: ...
    def add(self, path: str, value: Any) -> None: ...
    def remove(self, path: str, value: Any) -> bool: ...
    def clear(self, path: str) -> bool: ...
    def get(self, path: str, partial: bool = ...) -> List[Tuple[str, Sequence]]: ...
    def walk(self, topdown: bool = ...) -> Generator[Tuple[str, Sequence[Any]], None, None]: ...
    def paths(self) -> Sequence[str]: ...
