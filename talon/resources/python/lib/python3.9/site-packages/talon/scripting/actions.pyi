import inspect
from . import rctx as rctx
from .registry import Registry as Registry
from .types import ActionDecl as ActionDecl, ActionImpl as ActionImpl, FreezeBase as FreezeBase, ImmutableClassMeta as ImmutableClassMeta
from _typeshed import Incomplete
from talon import cron as cron, debug as debug, events as events
from talon.lib.time import sleep as sleep
from typing import Any, Optional, Union

class ActionPath(FreezeBase, metaclass=ImmutableClassMeta):
    def __init__(self, actions: Actions, path: str, *, chain: int = ...) -> None: ...
    def __getattr__(self, name: str) -> ActionPath: ...
    def doc(self) -> Optional[str]: ...
    __doc__: Incomplete
    @property
    def __name__(self) -> str: ...
    @property
    def __signature__(self) -> inspect.Signature: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __dir__(self): ...
    def __callable__(self) -> bool: ...

class ActionClassProxy(ActionPath):
    def __call__(self, *args, **kwargs) -> None: ...
    def __getattr__(self, name: str) -> ActionPath: ...

class Actions(FreezeBase, metaclass=ImmutableClassMeta):
    def __init__(self, registry: Registry) -> None: ...
    def __getattr__(self, path: str) -> ActionPath: ...
    def sleep(self, duration: Union[float, str]): ...
    def list(self, prefix: str = ...) -> None: ...
    def find(self, search: str, *, inactive: bool = ...) -> None: ...
    @property
    def next(self) -> ActionPath: ...
    def __dir__(self): ...
