from _typeshed import Incomplete
from talon.lib import js as js
from talon.scripting.types import FreezeBase as FreezeBase, ImmutableClassMeta as ImmutableClassMeta
from typing import Any, Union

def from_object(value: js.Object) -> None: ...

class MetaProxy:
    def __init__(self, target: Any) -> None: ...
    def __getattr__(self, key: str) -> Any: ...
    def __setattr__(self, key: str, value: Any) -> None: ...

class Context(metaclass=ImmutableClassMeta):
    ctx: Incomplete
    def __init__(self) -> None: ...
    @property
    def matches(self) -> str: ...
    @matches.setter
    def matches(self, value: str) -> None: ...
    @property
    def settings(self) -> dict[str, Any]: ...
    @settings.setter
    def settings(self, value: dict[str, Any]) -> None: ...
    @property
    def lists(self) -> dict[str, str]: ...
    @lists.setter
    def lists(self, value: Union[list[str], dict[str, str]]) -> None: ...
    @property
    def tags(self) -> list[str]: ...
    @tags.setter
    def tags(self, value: list[str]) -> None: ...
    def action_class(self, path: str, cls: js.Object) -> js.Object: ...

class TalonJavascriptNamespace(FreezeBase, metaclass=ImmutableClassMeta):
    actions: Incomplete
    settings: Incomplete
    Context: Incomplete
    def __init__(self) -> None: ...
