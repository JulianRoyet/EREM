from talon.linux.tap import *
from .app import platform as platform
from _typeshed import Incomplete
from talon.windows.tap import Event as Event, KeyEvent as KeyEvent, MouseEvent as MouseEvent, ScrollEvent as ScrollEvent, register as register, unregister as unregister

KEY: int
MCLICK: int
MMOVE: int
SCROLL: int
ALL: Incomplete
HOOK: int
DOWN: int
UP: int
CTRL: int
ALT: int
SHIFT: int
CMD: int
SUPER = CMD
WIN = CMD
FN: int
DRAG: int
MODS: list[tuple[str, int]]
MOD_FLAGS: Incomplete

class BaseEvent:
    ts: float
    type: int
    flags: int
    def modify(self) -> None: ...
    def block(self) -> None: ...
    @property
    def down(self) -> bool: ...
    @property
    def up(self) -> bool: ...

class BaseKeyEvent(BaseEvent):
    code: int
    repeat: bool
    key: str

class BaseMouseEvent(BaseEvent):
    type: Incomplete
    ts: Incomplete
    flags: Incomplete
    button: Incomplete
    def __init__(self, typ: int, ts: float, flags: int, button: int, x: float, y: float, dx: float, dy: float) -> None: ...
    x: float
    y: float
    dx: float
    dy: float

class BaseScrollEvent(BaseEvent):
    type: Incomplete
    ts: Incomplete
    by_line: Incomplete
    def __init__(self, typ: int, ts: float, by_line: bool, x: float, y: float, px: float, py: float) -> None: ...
    x: float
    y: float
    px: float
    py: float
