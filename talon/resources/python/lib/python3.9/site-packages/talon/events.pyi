from _typeshed import Incomplete
from talon.debug import log_exception as log_exception
from talon.scripting import rctx as rctx
from typing import Callable, Dict, Iterator, List, Optional, Union

AttrValue = Union[str, int, float]
AttrDict = Dict[str, AttrValue]

class Event:
    num: int
    path: str
    topic: str
    desc: str
    noisy: bool
    attrs: AttrDict
    def __init__(self, num: int, path: str, topic: str, desc: str, noisy: bool, **attrs: AttrValue) -> None: ...
    def __lt__(self, other: Event) -> bool: ...

class RingBus:
    nonce: Iterator[int]
    ring: List[Optional[Event]]
    size: Incomplete
    def __init__(self, size: int) -> None: ...
    def write(self, topic: str, desc: str = ..., *, noisy: bool = ..., **kwargs: AttrValue) -> None: ...
    def read(self, last: Event = ...) -> List[Event]: ...

class RingReader:
    bus: RingBus
    last: Optional[Event]
    def __init__(self, bus: RingBus) -> None: ...
    def __iter__(self) -> Iterator[Event]: ...

class EventSystem:
    bus: Incomplete
    write: Incomplete
    def __init__(self) -> None: ...
    def reader(self) -> RingReader: ...
    def tail(self, search: Union[str, Callable[[str], bool]] = ..., *, limit: int = ..., noisy: bool = ...) -> None: ...
    def tail_all(self, *args, **kwargs) -> None: ...

write: Incomplete
reader: Incomplete
tail: Incomplete
tail_all: Incomplete
