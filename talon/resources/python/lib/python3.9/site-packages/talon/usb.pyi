from _typeshed import Incomplete
from talon import cron as cron
from talon.api import ffi as ffi, ffi_string as ffi_string, lib as lib
from talon.debug import log_exception as log_exception
from talon.scripting import Dispatch as Dispatch
from talon.track.tobii import TobiiECWrapper as TobiiECWrapper
from typing import List, Tuple

class USBDevice:
    usb_dev: Incomplete
    def __init__(self, usb_dev: ffi.CData) -> None: ...
    def close(self, *, shutdown: bool = ...) -> None: ...
    def __del__(self) -> None: ...

class USBManager(Dispatch):
    lookup: Incomplete
    def __init__(self) -> None: ...
    def on_hotplug(self, dev: ffi.CData, attached: bool, vid: int, pid: int, bus: int, addr: int) -> None: ...
    def devices(self) -> List[USBDevice]: ...
    def shutdown(self) -> None: ...

usb: Incomplete
devices: Incomplete
register: Incomplete
unregister: Incomplete
DeviceKeyType = Tuple[int, int, int, int]

class USBHotplugPoller:
    last_devices: Incomplete
    enum_devices: Incomplete
    def __init__(self) -> None: ...
    def run(self) -> None: ...
    def poll(self) -> bool: ...
    def on_hotplug(self, dev: ffi.CData, attached: bool, vid: int, pid: int, bus: int, addr: int) -> None: ...

hotplug_poller: Incomplete

def async_hotplug_setup(poll: bool = ...) -> None: ...
