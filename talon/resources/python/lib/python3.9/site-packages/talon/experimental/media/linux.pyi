import asyncio
import threading
from _typeshed import Incomplete
from dbus_next import Message as Message, MessageType as MessageType
from dbus_next.aio import MessageBus, ProxyObject as ProxyObject
from dbus_next.introspection import Interface as Interface
from talon import ui as ui
from talon.scripting import Dispatch as Dispatch, rctx as rctx
from typing import Any, Coroutine, Optional

class MediaPlayer(Dispatch):
    name: str
    proxy: ProxyObject
    properties: ProxyObject
    last_playing: float
    last_info: dict[str, Any]
    last_props: dict[str, Any]
    def __init__(self, name: str, proxy: ProxyObject, properties: ProxyObject) -> None: ...
    def on_metadata(self, meta: dict[str, Any]) -> None: ...
    def on_playing(self, status: str) -> None: ...
    def on_properties_changed(self, name: str, changed: dict[str, Any], invalidated: list[str]) -> None: ...
    async def setup(self) -> None: ...
    async def teardown(self) -> None: ...

class MediaClient(Dispatch):
    bus: MessageBus
    loop: asyncio.AbstractEventLoop
    players: dict[str, MediaPlayer]
    proxies: dict[str, ProxyObject]
    semaphore: threading.Semaphore
    exception: Optional[Exception]
    thread: Incomplete
    def __init__(self) -> None: ...
    def on_player_event(self, topic: str, player: MediaPlayer, msg: Any) -> None: ...
    async def on_add(self, name: str) -> None: ...
    async def on_remove(self, name: str) -> None: ...
    async def on_name_owner_changed(self, name: str, old: str, new: str) -> None: ...
    async def run(self) -> None: ...
    def recent_player(self) -> MediaPlayer: ...
    def recent_proxy(self) -> ProxyObject: ...
    async def is_playing(self) -> bool: ...
    async def get_info(self) -> dict[str, Any]: ...
    async def get_props(self) -> dict[str, Any]: ...
    async def play(self) -> None: ...
    async def pause(self) -> None: ...
    async def play_pause(self) -> None: ...
    async def stop(self) -> None: ...
    async def next_track(self) -> None: ...
    async def previous_track(self) -> None: ...
    async def seek(self, offset: float) -> None: ...
    async def seek_absolute(self, position: float) -> None: ...
    def invoke(self, coro: Coroutine) -> Any: ...

register: Incomplete
unregister: Incomplete

def is_playing() -> bool: ...
def active_app() -> ui.App: ...
def get_info() -> dict[str, Any]: ...
def play() -> None: ...
def pause() -> None: ...
def play_pause() -> None: ...
def stop() -> None: ...
def next_track() -> None: ...
def previous_track() -> None: ...
def seek(offset: float) -> None: ...
def seek_set(position: float) -> None: ...
