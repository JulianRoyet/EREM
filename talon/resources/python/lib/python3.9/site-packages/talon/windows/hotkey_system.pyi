from _typeshed import Incomplete
from talon import cron as cron
from talon.api import ffi as ffi, lib as lib
from talon.debug import log_exception as log_exception
from talon.lib.keys import Key as Key, parse_keys as parse_keys
from talon.scripting.hotkey_system import BaseHotkeySystem as BaseHotkeySystem
from talon.windows import keymap as keymap
from talon.windows.event_window import EventWindow as EventWindow
from typing import Optional

WM_REFRESH: Incomplete
REPEAT_COUNT_MASK: Incomplete
MOD_ALT: int
MOD_CONTROL: int
MOD_SHIFT: int
MOD_WIN: int
MOD_NOREPEAT: int
MODS: Incomplete

class Mapping:
    id: int
    keystr: str
    key: Key
    canonical: str
    code: int
    mod_mask: int
    def __init__(self, id, keystr, key, canonical, code, mod_mask) -> None: ...

def map_key(keystr: str, _id: int) -> Mapping: ...

class HotkeySystem(BaseHotkeySystem):
    window: EventWindow
    hwnd: int
    mappings: dict[int, Mapping]
    active_hotkeys: set[Mapping]
    job: Optional[cron.Job]
    def __init__(self) -> None: ...
    def bind(self, mapping: Mapping) -> None: ...
    def unbind(self, mapping: Mapping) -> None: ...
    def tick(self) -> None: ...
    def wndproc(self, hwnd: int, msg: int, wparam: int, lparam: int) -> int: ...
    def update(self) -> None: ...
