from _typeshed import Incomplete
from datetime import datetime
from talon.debug import log_exception as log_exception
from talon.lib.time import sleep as sleep
from talon.scripting import Dispatch as Dispatch
from talon.ui import Rect as Rect, UIErr as UIErr
from talon.windows import dwm as dwm, tap as tap
from typing import Any, Iterable, NamedTuple, Sequence

wffi: Incomplete
user32: Incomplete

class process_info(NamedTuple):
    pid: Incomplete
    exe: Incomplete
    cmdline: Incomplete
    name: Incomplete
    created_at: Incomplete

class win_info(NamedTuple):
    id: Incomplete
    title: Incomplete
    cls: Incomplete
    pid: Incomplete
    rect: Incomplete
    visible: Incomplete

def parse_wmi_date(date: str) -> datetime: ...
def process_windows(pids: Iterable[int]) -> Sequence[Any]: ...

class ProcessMonitor(Dispatch):
    thread: Incomplete
    processes: Incomplete
    wait_cond: Incomplete
    run_cond: Incomplete
    def __init__(self) -> None: ...
    def start(self) -> None: ...
    def poll(self) -> None: ...
    def ensure_pid(self, pid: int) -> None: ...

def WinEventProc(hook, event, hwnd, obj, child, event_thread, event_time) -> None: ...
def KeyboardProc(code, wparam, lparam): ...
def MouseProc(code, wparam, lparam): ...

class EventMonitor(Dispatch):
    thread: Incomplete
    poll_thread: Incomplete
    win_hook: Incomplete
    mouse_hook: Incomplete
    keyboard_hook: Incomplete
    procmon: Incomplete
    foreground_cond: Incomplete
    last_foreground: Incomplete
    def __init__(self) -> None: ...
    def start(self) -> None: ...
    def run(self) -> None: ...
    def ensure_foreground(self) -> None: ...
    def poller(self) -> None: ...
    def WinEventProc(self, hook, event, hwnd, obj, child, event_thread, event_time) -> None: ...

monitor: Incomplete
