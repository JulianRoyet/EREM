from _typeshed import Incomplete
from talon.scripting import Dispatch as Dispatch
from talon.tap import ALL as ALL, ALT as ALT, BaseEvent as BaseEvent, BaseKeyEvent as BaseKeyEvent, BaseMouseEvent as BaseMouseEvent, BaseScrollEvent as BaseScrollEvent, CMD as CMD, CTRL as CTRL, DOWN as DOWN, DRAG as DRAG, HOOK as HOOK, KEY as KEY, MCLICK as MCLICK, MMOVE as MMOVE, MOD_FLAGS as MOD_FLAGS, SCROLL as SCROLL, SHIFT as SHIFT, SUPER as SUPER, UP as UP, WIN as WIN
from typing import Callable

MODS: Incomplete
WM_XBUTTONDOWN: int
WM_XBUTTONUP: int
WM_MOUSEHWHEEL: int

class Event(BaseEvent): ...
class KeyEvent(BaseKeyEvent, Event): ...
class MouseEvent(BaseMouseEvent, Event): ...
class ScrollEvent(BaseScrollEvent, Event): ...

class InputFilter:
    tap: Incomplete
    def __init__(self, tap) -> None: ...
    def KeyboardProc(self, wparam, info) -> None: ...
    def MouseProc(self, wparam, info): ...
TapCallableType = Callable[[Event], bool]

class Tap(Dispatch):
    def register(self, mask: int, cb: TapCallableType) -> None: ...
    def unregister(self, mask: int, cb: TapCallableType) -> None: ...

register: Incomplete
unregister: Incomplete
