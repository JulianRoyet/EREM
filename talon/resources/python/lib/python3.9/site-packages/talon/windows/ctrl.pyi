from _typeshed import Incomplete
from talon import ui
from talon.api import ffi
from typing import Sequence, Set, Tuple

class Input:
    type: int
    handle: ffi.CData
    def __init__(self) -> None: ...

class KeyInput(Input):
    handle: Incomplete
    def __init__(self, keycode: int, scancode: int, flags: int) -> None: ...

class MouseInput(Input):
    handle: Incomplete
    def __init__(self, flags: int, data: int, *, x: int = ..., y: int = ...) -> None: ...

def key_press(key: str, *, mods: Sequence[str] = ..., down: bool = ..., up: bool = ..., hold: int = ..., wait: int = ..., app: ui.App = ..., **kwargs) -> None: ...
def mouse_click(button: int = ..., times: int = ..., *, pos: Tuple[float, float] = ..., down: bool = ..., up: bool = ..., hold: int = ..., wait: int = ..., app: ui.App = ...) -> None: ...
def mouse_move(x: float, y: float, *, dx: float = ..., dy: float = ..., app: ui.App = ...) -> None: ...
def mouse_buttons_down() -> Set[int]: ...
def mouse_scroll(y: float = ..., x: float = ..., *, pos: Tuple[float, float] = ..., by_lines: bool = ..., app: ui.App = ...) -> None: ...
def mouse_pos() -> Tuple[float, float]: ...
def cursor_visible(value: bool) -> None: ...
