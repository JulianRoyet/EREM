from .matrix import Matrix as Matrix
from .rrect import RoundRect as RoundRect
from .util import points_to_sk as points_to_sk
from _typeshed import Incomplete
from talon.api import ffi as ffi, ffi_string as ffi_string, lib as lib
from talon.types import NameEnum as NameEnum, Point2d as Point2d, Rect as Rect
from typing import Sequence

class Path:
    class AddMode(NameEnum):
        APPEND: Incomplete
        EXTEND: Incomplete
    class ArcSize(NameEnum):
        SMALL: Incomplete
        LARGE: Incomplete
    class Direction(NameEnum):
        CW: Incomplete
        CCW: Incomplete
    class FillType(NameEnum):
        WINDING: Incomplete
        EVENODD: Incomplete
        INVERSE_WINDING: Incomplete
        INVERSE_EVENODD: Incomplete
    handle: Incomplete
    def __init__(self, *, handle: Incomplete | None = ...) -> None: ...
    def __del__(self) -> None: ...
    @classmethod
    def from_svg(cls, text: str) -> Path: ...
    def to_svg(self) -> str: ...
    def clone(self) -> Path: ...
    def reset(self) -> None: ...
    def rewind(self) -> None: ...
    def move_to(self, x: float, y: float) -> None: ...
    def line_to(self, x: float, y: float) -> None: ...
    def quad_to(self, x0: float, y0: float, x1: float, y1: float) -> None: ...
    def conic_to(self, x0: float, y0: float, x1: float, y1: float, w: float) -> None: ...
    def cubic_to(self, x0: float, y0: float, x1: float, y1: float, x2: float, y2: float) -> None: ...
    def arc_to(self, rx: float, ry: float, x_rotate: float, size: ArcSize, sweep: Direction, x: float, y: float) -> None: ...
    def rarc_to(self, rx: float, ry: float, x_rotate: float, size: ArcSize, sweep: Direction, x: float, y: float) -> None: ...
    def arc_to_with_oval(self, oval: Rect, start_angle: float, sweep_angle: float, *, force_move_to: bool = ...) -> None: ...
    def arc_to_with_points(self, x1: float, y1: float, x2: float, y2: float, radius: float) -> None: ...
    def close(self) -> None: ...
    def add_rect(self, rect: Rect, direction: Direction, *, start: int = ...) -> None: ...
    def add_rrect(self, rrect: RoundRect, direction: Direction, *, start: int = ...) -> None: ...
    def add_rounded_rect(self, rect: Rect, rx: float, ry: float, direction: Direction) -> None: ...
    def add_oval(self, rect: Rect, direction: Direction) -> None: ...
    def get_bounds(self) -> Rect: ...
    def compute_tight_bounds(self) -> Rect: ...
    def rmove_to(self, dx: float, dy: float) -> None: ...
    def rline_to(self, dx: float, dy: float) -> None: ...
    def rquad_to(self, dx0: float, dy0: float, dx1: float, dy1: float) -> None: ...
    def rconic_to(self, dx0: float, dy0: float, dx1: float, dy1: float, w: float) -> None: ...
    def rcubic_to(self, dx0: float, dy0: float, dx1: float, dy1: float, dx2: float, dy2: float) -> None: ...
    def add_arc(self, rect: Rect, start_angle: float, sweep_angle: float) -> None: ...
    def transform(self, matrix: Matrix) -> None: ...
    def transform_to_dest(self, matrix: Matrix, destination: Path) -> None: ...
    def add_path_offset(self, other: Path, dx: float, dy: float, add_mode: AddMode) -> None: ...
    def add_path_matrix(self, other: Path, matrix: Matrix, add_mode: AddMode) -> None: ...
    def add_path(self, other: Path, add_mode: AddMode) -> None: ...
    def add_path_reverse(self, other: Path) -> None: ...
    def count_points(self) -> int: ...
    def count_verbs(self) -> int: ...
    def get_point(self, index: int) -> Point2d: ...
    def get_points(self, index: int) -> list[Point2d]: ...
    def get_last_point(self) -> Point2d: ...
    def contains(self, x: float, y: float) -> bool: ...
    @property
    def fill_type(self) -> FillType: ...
    @fill_type.setter
    def fill_type(self, value: FillType) -> None: ...
    def add_poly(self, points: Sequence[Point2d], *, close: bool) -> None: ...
    def is_oval(self, bounds: Rect) -> bool: ...
    def is_rrect(self, bounds: RoundRect) -> bool: ...
    def is_line(self, x1: float, y1: float, x2: float, y2: float) -> bool: ...
    def is_rect(self, rect: Rect, is_closed: bool, direction: Direction) -> bool: ...
    def is_convex(self) -> bool: ...
