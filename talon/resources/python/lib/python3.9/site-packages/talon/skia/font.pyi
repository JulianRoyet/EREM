from .ffi import ffi as ffi, lib as lib
from .paint import Paint as Paint
from .typeface import Typeface as Typeface
from _typeshed import Incomplete
from talon.types import Point2d as Point2d, Rect as Rect
from typing import List, Tuple, Union

class Font:
    handle: Incomplete
    def __init__(self, *, handle: Incomplete | None = ...) -> None: ...
    @classmethod
    def new_with_values(cls, typeface, size: float, scale_x: float, skew_x: float) -> Font: ...
    def clone(self) -> Font: ...
    @property
    def force_auto_hinting(self) -> bool: ...
    @force_auto_hinting.setter
    def force_auto_hinting(self, value: bool): ...
    @property
    def embedded_bitmaps(self) -> bool: ...
    @embedded_bitmaps.setter
    def embedded_bitmaps(self, value: bool): ...
    @property
    def subpixel(self) -> bool: ...
    @subpixel.setter
    def subpixel(self, value: bool): ...
    @property
    def linear_metrics(self) -> bool: ...
    @linear_metrics.setter
    def linear_metrics(self, value: bool): ...
    @property
    def embolden(self) -> bool: ...
    @embolden.setter
    def embolden(self, value: bool): ...
    @property
    def baseline_snap(self) -> bool: ...
    @baseline_snap.setter
    def baseline_snap(self, value: bool): ...
    @property
    def typeface(self) -> Typeface: ...
    @typeface.setter
    def typeface(self, typeface: Union[str, Typeface]): ...
    @property
    def size(self) -> float: ...
    @size.setter
    def size(self, value: float): ...
    @property
    def scale_x(self) -> float: ...
    @scale_x.setter
    def scale_x(self, value: float): ...
    @property
    def skew_x(self) -> float: ...
    @skew_x.setter
    def skew_x(self, value: float): ...
    def break_text(self, text: str, max_width: float, *, paint: Paint = ...) -> Tuple[int, float]: ...
    def measure_text(self, text: str, *, paint: Paint = ...) -> Tuple[float, Rect]: ...
    def get_metrics(self) -> Tuple[float, ffi.CData]: ...
    def get_line_height(self) -> float: ...
    def get_glyphs(self, text: str) -> List[int]: ...
    def get_glyph_positions(self, glyphs: List[int]) -> Tuple[List[Point2d], Point2d]: ...
    def __del__(self) -> None: ...
