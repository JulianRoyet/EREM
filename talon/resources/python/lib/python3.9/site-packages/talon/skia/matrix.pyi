from .ffi import ffi as ffi, lib as lib
from _typeshed import Incomplete

class Matrix:
    @classmethod
    def new(cls, a1, a2, a3, b1, b2, b3, c1, c2, c3): ...
    handle: Incomplete
    def __init__(self, handle: Incomplete | None = ...) -> None: ...
    def set_identity(self) -> None: ...
    def set_translate(self, tx, ty) -> None: ...
    def pre_translate(self, tx, ty) -> None: ...
    def post_translate(self, tx, ty) -> None: ...
    def set_scale(self, sx, sy) -> None: ...
    def pre_scale(self, sx, sy) -> None: ...
    def post_scale(self, sx, sy) -> None: ...

class Matrix4:
    handle: Incomplete
    def __init__(self) -> None: ...
    def matrix3(self): ...
    def set(self, row, col, value) -> None: ...
    def get(self, row, col): ...
    def rotate(self, x, y, z, rads) -> None: ...
    def type(self): ...
    def __del__(self) -> None: ...
