from .util import ColorType as ColorType, color_to_sk as color_to_sk, colors_to_sk as colors_to_sk, points_to_sk as points_to_sk
from _typeshed import Incomplete
from talon.api import ffi as ffi, lib as lib
from talon.types import NameEnum as NameEnum, Point2d as Point2d
from typing import Sequence, overload

def parse_colors(colors: Sequence[ColorType], pos: Sequence[float] = ...): ...

class Shader:
    class TileMode(NameEnum):
        CLAMP: Incomplete
        REPEAT: Incomplete
        MIRROR: Incomplete
    @overload
    @classmethod
    def linear_gradient(cls, x1: float, y1: float, x2: float, y2: float, colors: Sequence[ColorType], pos: Sequence[float] = ..., *, mode=..., matrix=...) -> Shader: ...
    @overload
    @classmethod
    def linear_gradient(cls, p1: Point2d, p2: Point2d, colors: Sequence[ColorType], pos: Sequence[float] = ..., *, mode=..., matrix=...) -> Shader: ...
    @classmethod
    def radial_gradient(cls, point: Point2d, radius: float, colors: list[ColorType], *, pos: list[float] = ..., mode=..., matrix=...) -> Shader: ...
    @classmethod
    def sweep_gradient(cls, point: Point2d, radius: float, colors: list[ColorType], start_angle: float, end_angle: float, *, pos: list[float] = ..., mode=..., matrix=...) -> Shader: ...
    @classmethod
    def two_point_conical_gradient(cls, p1: Point2d, radius1: float, p2: Point2d, radius2: float, colors: list[ColorType], *, pos: list[float] = ..., mode=..., matrix=...) -> Shader: ...
    handle: Incomplete
    def __init__(self, handle) -> None: ...
    def __del__(self) -> None: ...
