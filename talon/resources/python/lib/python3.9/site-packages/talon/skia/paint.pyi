from .font import Font as Font
from .util import color_from_sk as color_from_sk, color_to_sk as color_to_sk
from _typeshed import Incomplete
from talon.api import ffi as ffi, lib as lib
from talon.types import NameEnum as NameEnum, Rect as Rect

class Paint:
    class Blend(NameEnum):
        CLEAR: Incomplete
        SRC: Incomplete
        DST: Incomplete
        SRCOVER: Incomplete
        DSTOVER: Incomplete
        SRCIN: Incomplete
        DSTIN: Incomplete
        SRCOUT: Incomplete
        DSTOUT: Incomplete
        SRCATOP: Incomplete
        DSTATOP: Incomplete
        XOR: Incomplete
        PLUS: Incomplete
        MODULATE: Incomplete
        SCREEN: Incomplete
        OVERLAY: Incomplete
        DARKEN: Incomplete
        LIGHTEN: Incomplete
        COLORDODGE: Incomplete
        COLORBURN: Incomplete
        HARDLIGHT: Incomplete
        SOFTLIGHT: Incomplete
        DIFFERENCE: Incomplete
        EXCLUSION: Incomplete
        MULTIPLY: Incomplete
        HUE: Incomplete
        SATURATION: Incomplete
        COLOR: Incomplete
        LUMINOSITY: Incomplete
    class TextAlign(NameEnum):
        LEFT: Incomplete
        CENTER: Incomplete
        RIGHT: Incomplete
    class FilterQuality(NameEnum):
        NONE: Incomplete
        LOW: Incomplete
        MEDIUM: Incomplete
        HIGH: Incomplete
    class ClipOp(NameEnum):
        DIFFERENCE: Incomplete
        INTERSECT: Incomplete
    class Style(NameEnum):
        FILL: Incomplete
        STROKE: Incomplete
        STROKE_AND_FILL: Incomplete
    handle: Incomplete
    font: Incomplete
    def __init__(self, handle: ffi.CData = ..., *, font: Font = ..., text_align: TextAlign = ...) -> None: ...
    def clone(self): ...
    def __del__(self) -> None: ...
    @property
    def antialias(self) -> bool: ...
    @antialias.setter
    def antialias(self, value: bool) -> None: ...
    @property
    def color(self): ...
    @color.setter
    def color(self, color) -> None: ...
    @property
    def style(self): ...
    @style.setter
    def style(self, style) -> None: ...
    @property
    def stroke_width(self): ...
    @stroke_width.setter
    def stroke_width(self, width) -> None: ...
    @property
    def stroke_miter(self): ...
    @stroke_miter.setter
    def stroke_miter(self, miter) -> None: ...
    @property
    def stroke_cap(self): ...
    @stroke_cap.setter
    def stroke_cap(self, cap) -> None: ...
    @property
    def stroke_join(self): ...
    @stroke_join.setter
    def stroke_join(self, join) -> None: ...
    @property
    def shader(self): ...
    @shader.setter
    def shader(self, shader) -> None: ...
    @property
    def maskfilter(self): ...
    @maskfilter.setter
    def maskfilter(self, maskfilter) -> None: ...
    @property
    def blendmode(self): ...
    @blendmode.setter
    def blendmode(self, blendmode) -> None: ...
    @property
    def dither(self): ...
    @dither.setter
    def dither(self, value) -> None: ...
    @property
    def verticaltext(self): ...
    @verticaltext.setter
    def verticaltext(self, value) -> None: ...
    @property
    def colorfilter(self): ...
    @colorfilter.setter
    def colorfilter(self, colorfilter) -> None: ...
    @property
    def imagefilter(self): ...
    @imagefilter.setter
    def imagefilter(self, imagefilter) -> None: ...
    @property
    def filter_quality(self): ...
    @filter_quality.setter
    def filter_quality(self, filter_quality) -> None: ...
    @property
    def typeface(self): ...
    @typeface.setter
    def typeface(self, typeface) -> None: ...
    @property
    def textsize(self): ...
    @textsize.setter
    def textsize(self, size) -> None: ...
    @property
    def text_align(self) -> TextAlign: ...
    @text_align.setter
    def text_align(self, value: TextAlign): ...
    @property
    def text_scale_x(self): ...
    @text_scale_x.setter
    def text_scale_x(self, scale) -> None: ...
    @property
    def text_skew_x(self): ...
    @text_skew_x.setter
    def text_skew_x(self, skew) -> None: ...
    @property
    def path_effect(self): ...
    @path_effect.setter
    def path_effect(self, effect) -> None: ...
    @property
    def linear_text(self): ...
    @linear_text.setter
    def linear_text(self, value) -> None: ...
    @property
    def subpixel_text(self): ...
    @subpixel_text.setter
    def subpixel_text(self, value) -> None: ...
    @property
    def lcd_render_text(self): ...
    @lcd_render_text.setter
    def lcd_render_text(self, value) -> None: ...
    @property
    def embedded_bitmap_text(self): ...
    @embedded_bitmap_text.setter
    def embedded_bitmap_text(self, value) -> None: ...
    @property
    def hinting(self): ...
    @hinting.setter
    def hinting(self, hinting) -> None: ...
    @property
    def autohinted(self): ...
    @autohinted.setter
    def autohinted(self, value) -> None: ...
    @property
    def fake_bold_text(self): ...
    @fake_bold_text.setter
    def fake_bold_text(self, value) -> None: ...
    @property
    def dev_kern_text(self): ...
    @dev_kern_text.setter
    def dev_kern_text(self, value) -> None: ...
    def break_text(self, text, max_width): ...
    def measure_text(self, text): ...
