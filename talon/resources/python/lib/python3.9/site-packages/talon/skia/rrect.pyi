from .ffi import ffi as ffi, lib as lib
from .rect import Rect as Rect
from _typeshed import Incomplete
from typing import Tuple

class RoundRect:
    @classmethod
    def empty(self) -> RoundRect: ...
    @classmethod
    def oval(self, rect: Rect) -> RoundRect: ...
    @classmethod
    def from_rect(self, rect: Rect, *, x: float = ..., y: float = ..., radii: Tuple[float, float] = ...) -> RoundRect: ...
    @classmethod
    def nine_patch(self, *, left: float, top: float, right: float, bottom: float) -> RoundRect: ...
    handle: Incomplete
    def __init__(self, handle: ffi.CData = ...) -> None: ...
    @property
    def top_left_radii(self) -> Tuple[float, float]: ...
    @property
    def top_right_radii(self) -> Tuple[float, float]: ...
    @property
    def bottom_left_radii(self) -> Tuple[float, float]: ...
    @property
    def bottom_right_radii(self) -> Tuple[float, float]: ...
    @property
    def rect(self) -> Rect: ...
    @property
    def width(self) -> float: ...
    @property
    def height(self) -> float: ...
    def copy(self) -> RoundRect: ...
    def inset(self, dx: float, dy: float) -> RoundRect: ...
    def outset(self, dx: float, dy: float) -> RoundRect: ...
    def offset(self, dx: float, dy: float) -> RoundRect: ...
    def contains_rect(self, rect: Rect) -> bool: ...
    def __bool__(self) -> bool: ...
    def __del__(self) -> None: ...
