from .bitmap import Bitmap as Bitmap
from .data import Data as Data
from .ffi import ffi as ffi, lib as lib
from .pixmap import Pixmap as Pixmap
from .rect import Rect as Rect
from .shader import Shader as Shader
from .util import SkiaError as SkiaError, colortype_width as colortype_width
from _typeshed import Incomplete

formats: Incomplete

class Image:
    ColorType: Incomplete
    AlphaType: Incomplete
    @classmethod
    def from_pixels(cls, data, stride, width, height, color_type=..., alpha_type=...): ...
    @classmethod
    def from_bitmap(cls, bitmap): ...
    @classmethod
    def from_encoded(cls, data): ...
    @classmethod
    def from_file(cls, path): ...
    @classmethod
    def from_picture(cls, picture, dims, matrix, paint): ...
    handle: Incomplete
    rect: Incomplete
    def __init__(self, handle, rect: Incomplete | None = ...) -> None: ...
    def __del__(self) -> None: ...
    @property
    def __array_interface__(self): ...
    @classmethod
    def from_array(cls, array): ...
    def reshape(self, width: Incomplete | None = ..., height: Incomplete | None = ..., color_type: Incomplete | None = ..., alpha_type: Incomplete | None = ...): ...
    def write_file(self, path) -> None: ...
    @property
    def width(self): ...
    @property
    def height(self): ...
    @property
    def unique_id(self): ...
    @property
    def color_type(self): ...
    @property
    def alpha_type(self): ...
    def is_alpha_only(self): ...
    def make_shader(self, tileX, tileY, localMatrix=...): ...
    def peek_pixels(self): ...
    def is_texture_backed(self): ...
    def is_lazy_generated(self): ...
    def read_pixels(self, x, y, width, height, color_type: Incomplete | None = ..., alpha_type: Incomplete | None = ...): ...
    def to_bitmap(self): ...
    def read_pixels_into_pixmap(self, dst, srcX, srcY, cachingHint): ...
    def scale_pixels(self, dst, quality, cachingHint): ...
    def encode(self, fmt: Incomplete | None = ..., quality: Incomplete | None = ...): ...
    def make_subset(self, subset): ...
    def make_non_texture_image(self): ...
    def make_with_filter(self, imagefilter, subset, clipBounds, outSubset, outOffset): ...
