from .ffi import ffi as ffi, lib as lib
from talon.types import Point2d as Point2d
from typing import Sequence, Tuple, Union

ColorType = Union[str, int, Tuple[float, ...]]
ColorTuple = tuple[int, int, int, int]
color_map: dict[str, ColorTuple]

def normalize_component(n: Union[int, float]) -> int: ...
def color_parse(color: ColorType) -> ColorTuple: ...

class Color(int):
    @classmethod
    def from_components(cls, r: int, g: int, b: int, a: int) -> Color: ...
    @classmethod
    def from_skia(cls, color: int) -> Color: ...
    @classmethod
    def parse(cls, color: ColorType) -> Color: ...
    @property
    def r(self) -> int: ...
    @property
    def g(self) -> int: ...
    @property
    def b(self) -> int: ...
    @property
    def a(self) -> int: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

def colors_to_sk(colors: Sequence[ColorType]) -> ffi.CData: ...
def color_to_sk(color: ColorType) -> int: ...
def color_from_sk(color): ...
def points_to_sk(*points: Point2d) -> ffi.CData: ...

colortype_width_map: dict[int, int]

def colortype_width(colortype: int) -> int: ...

class SkiaError(Exception): ...
