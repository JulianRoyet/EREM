from .data import Data as Data
from _typeshed import Incomplete
from talon.api import ffi as ffi, lib as lib
from talon.types import NameEnum as NameEnum

class Fontstyle:
    class Slant(NameEnum):
        UPRIGHT: Incomplete
        ITALIC: Incomplete
        OBLIQUE: Incomplete
    @classmethod
    def new(cls, weight: int, width: int, slant: Slant = ...) -> Fontstyle: ...
    handle: Incomplete
    def __init__(self, handle) -> None: ...
    @property
    def weight(self) -> int: ...
    @property
    def width(self) -> int: ...
    @property
    def slant(self) -> int: ...
    def __del__(self) -> None: ...

class Typeface:
    @classmethod
    def from_name(self, name: str, style: Fontstyle = ...) -> Typeface: ...
    @classmethod
    def from_file(self, path: str, index: int = ...) -> Typeface: ...
    @classmethod
    def from_data(self, data: Data, index: int = ...) -> Typeface: ...
    handle: Incomplete
    def __init__(self, handle: Incomplete | None = ...) -> None: ...
    @property
    def fontstyle(self) -> Fontstyle: ...
    @property
    def font_weight(self) -> int: ...
    @property
    def font_width(self) -> int: ...
    @property
    def font_slant(self) -> int: ...
    @property
    def is_fixed_pitch(self) -> bool: ...
    @property
    def units_per_em(self) -> int: ...
    def __del__(self) -> None: ...
