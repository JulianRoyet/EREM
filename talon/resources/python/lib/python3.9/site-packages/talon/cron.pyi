import types
from _typeshed import Incomplete
from talon import debug as debug
from talon.debug import format_stack as format_stack, log_exception as log_exception, object_name as object_name
from talon.lib.time import timer_resolution as timer_resolution
from talon.scripting import rctx as rctx
from typing import Callable, Iterator, Optional

def timespec_to_seconds(s: str) -> float: ...
def seconds_to_timespec(duration: float) -> str: ...

class Job:
    spec: str
    time: float
    expiry: float
    cb: Incomplete
    res: Incomplete
    frame: Incomplete
    def __init__(self, cron: Cron, spec: str, cb: Callable[[], None], frame: types.FrameType) -> None: ...
    def rebase(self, base: float, backoff: bool = ...) -> Job: ...
    def free(self) -> None: ...
    def __lt__(self, other: Job) -> bool: ...
    def __call__(self) -> None: ...

class Cron:
    jobs: Incomplete
    cancelled: Incomplete
    cond: Incomplete
    def __init__(self) -> None: ...
    def thread(self) -> None: ...
    def submit(self, job: Job) -> None: ...
    def job(self, timespec: str, cb: Callable[[], None]) -> Job: ...
    def interval(self, timespec: str, cb: Callable[[], Optional[bool]], backoff: bool = ...) -> Job: ...
    def after(self, timespec: str, cb: Callable[[], None]) -> Job: ...
    def cancel(self, job: Optional[Job]) -> None: ...

interval: Incomplete
after: Incomplete
cancel: Incomplete

def watchdog(name: str, timespec: str = ...) -> Iterator[None]: ...
