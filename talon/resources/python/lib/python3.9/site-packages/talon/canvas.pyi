from _typeshed import Incomplete
from talon import app as app, storage as storage, ui as ui
from talon.api import ffi as ffi, ffi_string as ffi_string, lib as lib
from talon.scripting import Dispatch as Dispatch, rctx as rctx
from talon.skia import Canvas as SkCanvas
from talon.types import Point2d as Point2d, Rect as Rect
from typing import Any, Dict, Generator, Iterable, Optional, Set

class MouseEvent:
    event: str
    button: Optional[int]
    clicks: int
    mods: Set[str]
    pos: Point2d
    gpos: Point2d
    down: bool
    up: bool
    move: bool
    @classmethod
    def from_dict(cls, topic: str, j: Dict) -> MouseEvent: ...

class KeyEvent:
    event: str
    key: str
    text: str
    mods: Set[str]
    repeat: bool
    down: bool
    up: bool
    @classmethod
    def from_dict(cls, topic: str, j: Dict) -> KeyEvent: ...

class ScrollEvent:
    event: str
    mods: Set[str]
    pos: Point2d
    gpos: Point2d
    pixels: Optional[Point2d]
    degrees: Optional[Point2d]
    @classmethod
    def from_dict(cls, topic: str, j: Dict) -> ScrollEvent: ...

class Canvas(Dispatch):
    @classmethod
    def from_screen(cls, screen: ui.Screen, **kwargs: Any) -> Canvas: ...
    @classmethod
    def from_rect(cls, rect: Rect, **kwargs: Any) -> Canvas: ...
    ctx: Incomplete
    name: Incomplete
    handle: Incomplete
    paused: Incomplete
    def __init__(self, x: float, y: float, width: float, height: float, *, paused: bool = ..., name: str = ..., backend: str = ..., software: bool = ..., panel: bool = ..., block_mouse: bool = ..., fullscreen: bool = ..., draggable: bool = ...) -> None: ...
    def draw(self, handle: ffi.CData, x: float, y: float, width: float, height: float) -> bool: ...
    def event(self, topic: str, j: Dict) -> bool: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    def hide(self) -> None: ...
    def show(self, resume: bool = ...) -> None: ...
    def freeze(self) -> None: ...
    def register_first(self, topic: str) -> None: ...
    def unregister_last(self, topic: str) -> None: ...
    @property
    def rect(self) -> Rect: ...
    @rect.setter
    def rect(self, rect: Rect) -> None: ...
    def move(self, x: float, y: float) -> None: ...
    def resize(self, width: float, height: float) -> None: ...
    def resize_from_screen(self, screen: ui.Screen) -> None: ...
    @property
    def panel(self) -> bool: ...
    @panel.setter
    def panel(self, panel: bool) -> None: ...
    @property
    def fullscreen(self) -> bool: ...
    @fullscreen.setter
    def fullscreen(self, fullscreen: bool) -> None: ...
    @property
    def draggable(self) -> bool: ...
    @draggable.setter
    def draggable(self, draggable: bool) -> None: ...
    @property
    def allows_capture(self) -> bool: ...
    @allows_capture.setter
    def allows_capture(self, allow: bool) -> None: ...
    def disable_capture(self) -> Generator[None, None, None]: ...
    @property
    def cursor_visible(self) -> bool: ...
    @cursor_visible.setter
    def cursor_visible(self, visible: bool) -> None: ...
    @property
    def blocks_mouse(self) -> bool: ...
    @blocks_mouse.setter
    def blocks_mouse(self, block: bool) -> None: ...
    @property
    def focused(self) -> bool: ...
    @focused.setter
    def focused(self, value: bool) -> None: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    def close(self) -> None: ...

class Overlay(Dispatch):
    canvases: Incomplete
    def __init__(self) -> None: ...
    def draw(self, c: SkCanvas) -> bool: ...
    @property
    def allows_capture(self) -> bool: ...
    @allows_capture.setter
    def allows_capture(self, allow: bool) -> None: ...
    def register_first(self, topic: str) -> None: ...
    def unregister_last(self, topic: str) -> None: ...
    def recreate(self, screens: Iterable[ui.Screen], force: bool = ...): ...
    def screen_update(self, screens: Iterable[ui.Screen]) -> None: ...

overlay: Incomplete
register: Incomplete
unregister: Incomplete
