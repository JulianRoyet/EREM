import rlcompleter
import socketserver
from _typeshed import Incomplete
from code import InteractiveConsole
from socketserver import ThreadingUnixStreamServer
from talon import debug as debug
from talon.app import platform as platform
from talon.debug import log_exception as log_exception
from talon.scripting import rctx as rctx
from talon.scripting.actions import ActionPath as ActionPath
from talon.windows.named_pipe import NamedPipeServer as NamedPipeServer
from typing import Any

class FakeMain: ...

imports: Incomplete

def init_locals(): ...
def more_imports(d) -> None: ...

class Completer(rlcompleter.Completer): ...

class Shell(InteractiveConsole):
    locals: dict[str, Any]
    buffer: list[Any]
    reader: Incomplete
    writer: Incomplete
    reset_count: int
    completer: Incomplete
    def __init__(self, reader, writer) -> None: ...
    def write(self, data: str): ...
    def input(self, mode: str, n: int) -> str: ...
    def output(self, b: bytes) -> int: ...
    def recv(self) -> dict: ...
    def send(self, cmd, **kwargs) -> None: ...
    def prompt(self, prompt) -> None: ...
    def interact(self) -> None: ...

class WindowsInteractiveServer(socketserver.BaseRequestHandler):
    def handle(self) -> None: ...

class ThreadedPipeServer(socketserver.ThreadingMixIn, NamedPipeServer): ...

path: str
server: Incomplete

class SocketInteractiveServer(socketserver.BaseRequestHandler):
    def handle(self) -> None: ...

class UnixServer(ThreadingUnixStreamServer):
    allow_reuse_address: bool

def serve_forever() -> None: ...
