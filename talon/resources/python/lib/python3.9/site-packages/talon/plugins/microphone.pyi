from _typeshed import Incomplete
from talon import app as app, cron as cron, debug as debug, menu as menu, ui as ui
from talon.lib import cubeb as cubeb
from talon.scripting import Dispatch as Dispatch
from typing import Optional, Sequence

ctx: Incomplete

class CubebStub(Dispatch):
    @property
    def backend_id(self) -> str: ...
    def default_input(self) -> Optional[cubeb.DeviceInfo]: ...
    def inputs(self) -> Sequence[cubeb.DeviceInfo]: ...

class _AbstractDevice:
    devid: Incomplete
    name: Incomplete
    def __init__(self, name: str) -> None: ...

NoneChoice: Incomplete
AutomaticChoice: Incomplete
SystemDefaultChoice: Incomplete
MicChoice: Incomplete

class MicrophoneManager(Dispatch):
    menu: Incomplete
    def __init__(self) -> None: ...
    def on_wake(self, event) -> None: ...
    def active_mic(self) -> Optional[cubeb.DeviceInfo]: ...
    def on_devices(self, device_type) -> None: ...
    def check_default_input(self) -> None: ...
    def set_microphone(self, mic: MicChoice) -> None: ...
    def apply(self) -> None: ...
    def menu_click(self, item) -> None: ...
    def update_menu(self) -> None: ...

manager: Incomplete
