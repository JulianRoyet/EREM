import threading
from _typeshed import Incomplete
from enum import IntEnum as IntEnum
from talon import Module as Module, actions as actions, app as app, canvas as canvas, cron as cron, ctrl as ctrl, metrics as metrics, storage as storage, tracking_system as tracking_system, ui as ui
from talon.cron import timespec_to_seconds as timespec_to_seconds
from talon.scripting import rctx as rctx
from talon.track.filter import Acceleration as Acceleration, KalmanFilter as KalmanFilter, LowPassFilter as LowPassFilter, MultiFilter as MultiFilter
from talon.track.tobii import FilterFrame as FilterFrame, GazeFrame as GazeFrame, TobiiEC as TobiiEC, TobiiFilter as TobiiFilter
from talon.types import Point2d as Point2d, Point3d as Point3d, Rect as Rect
from typing import Optional

tpc: Incomplete

class ControlMouseState:
    ts: float
    frame: FilterFrame
    tracker: TobiiEC
    screen: ui.Screen
    gaze_active: bool
    head_active: bool
    mouse_active: bool
    gaze_mm: Point2d
    zone1_mm: float
    zone2_mm: float
    origin_mm: Point2d
    target_mm: Optional[Point2d]
    target_px: Optional[Point2d]
    head_anchor: Point2d
    offset_mm: Point2d
    ctrl_px: Optional[Point2d]
    mouse_ts: float
    clicking: bool
    click_ts: float
    def __init__(self, ts, frame, tracker, screen, gaze_active, head_active, mouse_active, gaze_mm, zone1_mm, zone2_mm, origin_mm, target_mm, target_px, head_anchor, offset_mm, ctrl_px, mouse_ts, clicking, click_ts) -> None: ...

class BaseControlMouse:
    filters: dict[TobiiEC, TobiiFilter]
    lock: threading.RLock
    job: Optional[cron.Job]
    running: bool
    def __init__(self) -> None: ...
    def start(self) -> None: ...
    def on_start(self) -> None: ...
    def stop(self) -> None: ...
    def on_stop(self) -> None: ...
    def toggle(self, state: bool = ...): ...
    def on_change(self, topic: str) -> None: ...
    def on_gaze(self, frame: GazeFrame) -> None: ...
    def tick(self) -> None: ...
    def update(self, tracker: TobiiEC, screen: ui.Screen, frame: FilterFrame) -> None: ...

class ControlMouse2(BaseControlMouse):
    debug: bool
    gaze_lowpass: LowPassFilter
    head_lowpass: LowPassFilter
    head_accel: Acceleration
    last_state: ControlMouseState
    ctrl_history: list[Point2d]
    def __init__(self, debug: bool = ...) -> None: ...
    def on_start(self) -> None: ...
    def on_stop(self) -> None: ...
    def draw(self, canvas) -> None: ...
    def update(self, tracker: TobiiEC, screen: ui.Screen, frame: FilterFrame) -> None: ...

control2: Incomplete

def tracker_count() -> int: ...

mod: Incomplete

class Actions:
    def calibrate() -> None: ...
    def control_zoom_enabled() -> bool: ...
    def control_zoom_toggle(state: bool = ...) -> None: ...
    def zoom(state: bool = ...) -> None: ...
    def zoom_cancel(state: bool = ...) -> None: ...
    def control_enabled() -> bool: ...
    def control_toggle(state: bool = ...) -> None: ...
    def control_debug_toggle(state: bool = ...) -> None: ...
    def control1_enabled() -> bool: ...
    def control1_toggle(state: bool = ...) -> None: ...

menu: Incomplete
control_item: Incomplete
control_debug_item: Incomplete
zoom_item: Incomplete
control1_item: Incomplete
calib_item: Incomplete

def on_ready() -> None: ...
