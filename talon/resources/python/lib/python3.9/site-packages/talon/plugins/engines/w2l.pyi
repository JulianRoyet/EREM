import threading
from _typeshed import Incomplete
from pathlib import Path as Path
from talon import app as app, blobfs as blobfs, menu as menu, speech_system as speech_system, storage as storage
from talon.debug import log_exception as log_exception
from talon.engines import w2l as w2l
from talon.pkg.download import downloader as downloader
from talon.scripting import rctx as rctx
from typing import Any, Callable, Optional

KNOWN_MODELS: Incomplete
ORT_PATCHES: Incomplete
DEBOUNCE_TIME: float

class Manifest:
    sha256: str
    name: str
    language: str
    blobs: list[dict[str, Any]]
    def to_info(self) -> w2l.W2lModelInfo: ...
    def __init__(self, sha256, name, language, blobs) -> None: ...

class BlobDownload:
    name: str
    sha256: str
    size: int
    queue: list[str]
    callback: Callable[[str, bool], None]
    path: Optional[str]
    progress_item: Optional[menu.MenuItem]
    def __init__(self, name, sha256, size, queue, callback, path, progress_item) -> None: ...

class LocalFile:
    name: str
    path: str
    size: int
    @property
    def sha256(self) -> str: ...
    def __init__(self, name, path, size, _sha256) -> None: ...

class BlobSync:
    downloads: dict[str, BlobDownload]
    local_files: dict[int, list[LocalFile]]
    scanned: bool
    lock: threading.RLock
    last_update: float
    def __init__(self) -> None: ...
    def scan(self) -> None: ...
    def fetch(self, sha256: str, cb: Callable[[str, bool], None], *, name: str = ..., size: int = ...) -> None: ...

class W2lInstallMenu:
    sync: BlobSync
    manifest_hashes: set[str]
    manifests: dict[str, Manifest]
    engines: dict[str, w2l.W2lEngine]
    lock: threading.RLock
    blob_to_manifests: dict[str, list[str]]
    manifest_to_blob: dict[str, set[str]]
    def __init__(self) -> None: ...
    def menu_click(self, item) -> None: ...
    def menu_update(self) -> None: ...
    def load_engine(self, manifest: Manifest) -> None: ...
    def install_manifest(self, manifest: Manifest) -> None: ...
    def load_manifest(self, sha256: str) -> bool: ...
    def on_sync_manifest(self, sha256: str, success: bool) -> None: ...
    def on_sync_file(self, sha256: str, success: bool) -> None: ...

install_menu: Incomplete
