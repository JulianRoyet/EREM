from _typeshed import Incomplete
from talon import actions as actions, app as app, cron as cron, ctrl as ctrl, metrics as metrics, resource as resource, speech_system as speech_system, ui as ui
from talon.api import ffi as ffi, lib as lib
from talon.engines.dragon import DraconityClient as DraconityClient, DragonEngine as DragonEngine

DRAGON_BUNDLE: str
TOML_PATH: Incomplete

def generate_toml() -> None: ...

class DragonManager:
    running: bool
    def __init__(self) -> None: ...
    def on_ready(self) -> None: ...
    def on_launch(self, app) -> None: ...
    def on_close(self, app) -> None: ...

class DragonManagerWindows(DragonManager):
    def inject_draconity(self, app) -> None: ...
    running: bool
    def on_launch(self, app): ...
    def on_close(self, app) -> None: ...

class DragonManagerMac(DragonManager):
    running: bool
    def on_launch(self, app): ...
    def on_close(self, app) -> None: ...
    def inject_draconity(self, app) -> None: ...

dragon: DragonManager
client: Incomplete
engine: Incomplete

def on_input(j) -> None: ...
