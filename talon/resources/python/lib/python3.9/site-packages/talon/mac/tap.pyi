from _typeshed import Incomplete
from collections import defaultdict as defaultdict
from talon.api import ffi as ffi, ffi_string as ffi_string, lib as lib
from talon.mac import ctrl as ctrl
from talon.mac.runloop import loop as loop
from talon.scripting import Dispatch as Dispatch
from talon.tap import ALL as ALL, ALT as ALT, BaseEvent as BaseEvent, BaseKeyEvent as BaseKeyEvent, BaseMouseEvent as BaseMouseEvent, BaseScrollEvent as BaseScrollEvent, CMD as CMD, CTRL as CTRL, DOWN as DOWN, DRAG as DRAG, FN as FN, HOOK as HOOK, KEY as KEY, MCLICK as MCLICK, MMOVE as MMOVE, MOD_FLAGS as MOD_FLAGS, SCROLL as SCROLL, SHIFT as SHIFT, SUPER as SUPER, UP as UP, WIN as WIN
from typing import Callable

MODS: Incomplete

class Event(BaseEvent):
    @classmethod
    def from_c(cls, typ: int, e: ffi.CData) -> Event: ...
    def to_c(self, e: ffi.CData) -> None: ...

class KeyEvent(Event, BaseKeyEvent):
    keyboard_type: int
    text: str
    type: Incomplete
    ts: Incomplete
    code: Incomplete
    repeat: Incomplete
    key: Incomplete
    def __init__(self, typ: int, ts: float, flags: int, code: int, repeat: bool, keyboard_type: int = ...) -> None: ...
    @classmethod
    def from_c(cls, typ: int, e: ffi.CData) -> KeyEvent: ...
    def to_c(self, e: ffi.CData) -> None: ...
    def __eq__(self, e: object) -> bool: ...
    def replace(self, key: str) -> None: ...

class MouseEvent(BaseMouseEvent, Event):
    @classmethod
    def from_c(cls, typ: int, e: ffi.CData) -> MouseEvent: ...
    def to_c(self, e: ffi.CData) -> None: ...

class ScrollEvent(BaseScrollEvent, Event):
    @classmethod
    def from_c(cls, typ: int, e: ffi.CData) -> ScrollEvent: ...
    def to_c(self, e: ffi.CData) -> None: ...
TapCallableType = Callable[[Event], bool]

class Tap(Dispatch):
    taps: Incomplete
    def __init__(self) -> None: ...
    def register(self, mask: int, cb: TapCallableType) -> None: ...
    def unregister(self, mask: int, cb: TapCallableType) -> None: ...
    def register_first(self, mask: int) -> None: ...
    def unregister_last(self, mask: int) -> None: ...
    def cleanup(self) -> None: ...

register: Incomplete
unregister: Incomplete
