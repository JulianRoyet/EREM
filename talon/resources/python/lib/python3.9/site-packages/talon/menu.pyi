from _typeshed import Incomplete
from talon import app as app
from talon.api import ffi as ffi, ffi_string as ffi_string, lib as lib
from talon.scripting import dispatch as dispatch, rctx as rctx
from typing import Any, Dict, List, Sequence, Set, Tuple

class MenuErr(Exception): ...

class MenuItem:
    parent: Incomplete
    rctx: Incomplete
    attrs: Incomplete
    weight: Incomplete
    hidden: Incomplete
    obj: Incomplete
    def __init__(self, parent: Menu, **kwargs) -> None: ...
    checked: bool
    def check(self) -> None: ...
    def uncheck(self) -> None: ...
    def dump(self) -> Tuple[List[Dict], Dict]: ...
    def update(self, **attrs) -> None: ...
    def __call__(self) -> None: ...
    def __getattr__(self, key: str) -> Any: ...
    def __setattr__(self, key: str, val: Any) -> None: ...
    def __delattr__(self, key: str) -> None: ...

class MenuToggle(MenuItem):
    @property
    def enabled(self) -> bool: ...
    def toggle(self) -> None: ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...

class Menu:
    parent_item: Incomplete
    imap: Incomplete
    parent: Incomplete
    root: Incomplete
    latch: int
    latch_hit: bool
    def __init__(self, parent: Menu = ..., item: MenuItem = ...) -> None: ...
    def check(self) -> None: ...
    def uncheck(self) -> None: ...
    @property
    def disabled(self) -> bool: ...
    @disabled.setter
    def disabled(self, value: bool) -> None: ...
    @property
    def items(self) -> Set[MenuItem]: ...
    @items.setter
    def items(self, val: Sequence[MenuItem]) -> None: ...
    def add(self, item: MenuItem) -> None: ...
    def remove(self, item: MenuItem) -> None: ...
    def toggle(self, name: str, checked: bool = ..., **kwargs) -> MenuItem: ...
    def item(self, name: str, **kwargs) -> MenuItem: ...
    def sep(self, weight: int = ...) -> MenuItem: ...
    def submenu(self, name: str, **kwargs) -> Menu: ...
    def refresh(self) -> None: ...
    def dump(self) -> Tuple[List[Dict], Dict]: ...
    def __enter__(self) -> None: ...
    def __exit__(self, typ, value, traceback) -> None: ...

menu: Incomplete

def on_menu(i: int) -> None: ...
