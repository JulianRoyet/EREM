import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from talon import screen as screen
from talon.debug import log_exception as log_exception
from talon.scripting import Dispatch as Dispatch, rctx as rctx
from typing import Sequence

class Tracker(ABC, Dispatch, metaclass=abc.ABCMeta):
    vendor: str
    model: str
    serial: str
    @abstractmethod
    def topics(self) -> Sequence[str]: ...

class TrackingSystem(Dispatch):
    trackers: Incomplete
    topics: Incomplete
    lambdas: Incomplete
    display_mapping: Incomplete
    def __init__(self) -> None: ...
    def on_attach(self, dev) -> None: ...
    def on_detach(self, dev) -> None: ...
    def add_tracker(self, topic: str, tracker: Tracker) -> None: ...
    def remove_tracker(self, topic: str, tracker: Tracker) -> None: ...
    def register_first(self, topic: str) -> None: ...
    def unregister_last(self, topic: str) -> None: ...
    def set_screen(self, tracker: Tracker, screen: screen.Screen) -> None: ...
    def unset_screen(self, tracker: Tracker): ...
    def get_screen(self, tracker: Tracker) -> screen.Screen: ...
