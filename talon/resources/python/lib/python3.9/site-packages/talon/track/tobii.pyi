import numpy as np
from _typeshed import Incomplete
from talon import app as app, cron as cron, metrics as metrics
from talon.api import ffi as ffi, ffi_string as ffi_string, lib as lib
from talon.debug import log_exception as log_exception
from talon.scripting import Dispatch as Dispatch
from talon.skia import Image as Image
from talon.track.filter import Acceleration as Acceleration, KalmanFilter as KalmanFilter, PointFilter as PointFilter
from talon.track.system import Tracker as Tracker
from talon.types import Point2d as Point2d, Point3d as Point3d, Point6d as Point6d, Rect as Rect
from talon.usb import USBDevice as USBDevice
from typing import Any, Dict, Iterator, Optional, Sequence, Set

class Geom:
    n: int
    tick_dist: float
    angle: float
    p1: Point3d
    p2: Point3d
    def __init__(self, n, tick_dist, angle, p1, p2) -> None: ...

def xconfig_from_mm(geom: Geom, width: float, height: float, offx: float) -> list[Any]: ...
def xconfig_from_diag(geom: Geom, diag: float, aspect: float, offx: float): ...

class EyeOpenErr(Exception): ...
class EyeClosedErr(Exception): ...

class EyeCmdErr(Exception):
    cmd: Incomplete
    err: Incomplete
    def __init__(self, cmd, err) -> None: ...

TYPE_CMD: int
TYPE_SUB_END: int
TYPE_NOTIF: int
TYPE_REQ: int
TYPE_RESP: int
TYPE_SUB: int
STREAM_GAZE: int
STREAM_VGA: int
STREAM_EXPROBE: int
STREAM_NXPROBE: int
STREAM_PRESENCE: int
STREAM_WEARABLE: int
STREAM_DIAGNOSTIC: int
STREAM_SYNC: int
STREAM_IMG_COLLECTION: int
STREAM_PERFORMANCE: int
STREAM_PRIMARY_IMG: int
STREAM_ALGORITHM_DEBUG: int
UPGRADE: int
CALIBRATE_START: int
CALIBRATE_STOP: int
CALIBRATE_POINT_ADD2D: int
CALIBRATE_POINT_ADD3D: int
CALIBRATE_POINT_ADD_EYE: int
NOTIF_CALIBRATE_STARTED: int
NOTIF_CALIBRATE_STOPPED: int
CALIBRATE_CLEAR: int
CALIBRATE_POINTS_APPLY: int
CALIBRATE_EYE_APPLY: int
CALIBRATE_POINT_REMOVE2D: int
CALIBRATE_POINT_REMOVE3D: int
CALIBRATE_GET_POINT_SUGGESTION: int
CALIBRATE_DOWNLOAD: int
CALIBRATE_UPLOAD: int
UNK: int
STREAM_TYPE_LIST: int
STREAM_COLUMN_LIST: int
STREAM_SUBSCRIBE: int
STREAM_UNSUBSCRIBE: int
NOTIF_STREAM_ADD: int
NOTIF_STREAM_REMOVE: int
NOTIF_STREAM_COLUMN_ADD: int
NOTIF_STREAM_COLUMN_REMOVE: int
NOTIF_STROBE_START: int
NOTIF_STROBE_STOP: int
CONFIG_GET: int
CONFIG_KEY_GET: int
CONFIG_KEY_SET: int
CONFIG_PROPERTIES_GET: int
CAPABILITIES_GET: int
NOTIF_CAPABILITIES_CHANGE: int
HEAD_BOX_GET: int
NOTIF_HEAD_BOX_CHANGE: int
UNIT_INFO_GET: int
CONFIG_3D_GET: int
CONFIG_3D_SET: int
NOTIF_CONFIG_3D_CHANGE: int
CONFIG_3D_WRITABLE_QUERY: int
LENS_CONFIG_SET: int
LENS_CONFIG_GET: int
LENS_CONFIG_WRITABLE_QUERY: int
STATUS_GET: int
DIAGNOSTIC_IMAGE_DUMP: int
DIAGNOSTIC_INFO_GET: int
PAYMENT_INFO_GET: int
FRAMERATE_GET: int
FRAMERATE_SET: int
FRAMERATE_LIST: int
NOTIF_FRAMERATE_CHANGE: int
FREQUENCIES_GET: int
FREQUENCIES_SET: int
FREQUENCIES_LIST: int
NOTIF_FREQUENCIES_CHANGED: int
NAME_GET: int
NAME_SET: int
EXT_ENABLE: int
EXT_LIST: int
EXT_LIST_ENABLED: int
AUTH_CHALLENGE: int
AUTH_RESPONSE: int
LOWBLINK_GET: int
LOWBLINK_SET: int
DIODE_CONFIG_GET: int
DIODE_CONFIG_SET: int
DIODE_CONFIG_LIST: int
MOUNTING_GET: int
POWER_SAVE_ENABLE: int
POWER_SAVE_DISABLE: int
NOTIF_POWER_SAVE_ENABLED: int
NOTIF_POWER_SAVE_DISABLED: int
REMOTE_WAKE_ENABLE: int
REMOTE_WAKE_DISABLE: int
FILE_LIST: int
FILE_WRITE: int
FILE_READ: int
FILE_ERASE: int
PAUSE_SET: int
NOTIF_PAUSE_CHANGED: int
ENABLED_EYE_SET: int
ENABLED_EYE_GET: int
FACE_GET: int
FACE_SET: int
FACE_LIST: int
CUSTOM_CMD: int

class TobiiEC(USBDevice, Tracker):
    vendor: str
    devs: Dict[ffi.CData, 'TobiiEC']
    topic_to_enum: Incomplete
    enum_to_topic: Incomplete
    geom: Geom
    streams: Set[int]
    stream_types: Dict[int, Dict]
    name: Incomplete
    model: Incomplete
    bus: Incomplete
    addr: Incomplete
    handle: Incomplete
    serial: str
    connecting: bool
    def __init__(self, dev: ffi.CData, name: str, vid: int, pid: int, bus: int, addr: int) -> None: ...
    def topics(self) -> Sequence[str]: ...
    version: Incomplete
    xconfig: Incomplete
    def connect(self) -> None: ...
    def check_error(self) -> None: ...
    def register_first(self, topic: str) -> None: ...
    def unregister_last(self, topic: str) -> None: ...
    def cmd(self, cmd: int, *args: Any) -> Any: ...
    def enumerate_streams(self) -> None: ...
    def label_stream(self, cmd: int, b: Dict) -> Dict: ...
    def display_setup(self, width: float, height: float, offx: float) -> None: ...
    def display_setup_diag(self, diag: float, aspect: float, offx: float) -> None: ...
    def on_stream(self, typ: int, cmd: int, ebuf: ffi.CData, ts: float) -> None: ...
    def close(self, shutdown: bool = ...) -> None: ...
    def detached(self) -> None: ...

class EyeFrame:
    name: str
    validity: int
    detected: int
    pupil: float
    gaze: Point2d
    gaze3d: Point3d
    rel: Point3d
    pos: Point3d
    def __init__(self, b: Dict, eye: str) -> None: ...
    def __bool__(self): ...

class GazeFrame:
    left: EyeFrame
    right: EyeFrame
    tracker: TobiiEC
    gaze: Optional[Point2d]
    ts: float
    num: int
    def __init__(self, b: Dict, num: int): ...
    def __iter__(self) -> Iterator[EyeFrame]: ...
    def __bool__(self): ...

class PresenceFrame:
    tracker: TobiiEC
    present: bool
    ts: float
    num: int
    def __init__(self, b: Dict, num: int) -> None: ...
    def __bool__(self): ...

class TobiiHeadModel:
    accel: PointFilter
    history: list[GazeFrame]
    last_ts: float
    def __init__(self) -> None: ...
    def __call__(self, frame: GazeFrame) -> Optional[Point6d]: ...

class FilterFrame:
    last_gaze: np.ndarray
    last_head: np.ndarray
    gaze: np.ndarray
    head: np.ndarray
    gaze_frame: GazeFrame
    left: bool
    right: bool
    def __post_init__(self) -> None: ...
    @property
    def ts(self) -> float: ...
    def __init__(self, last_gaze, last_head, gaze, head, gaze_frame, left, right) -> None: ...

class TobiiFilter:
    gaze_filter: KalmanFilter
    head_filter: KalmanFilter
    gaze_history: list[GazeFrame]
    last_frame: Optional[GazeFrame]
    leye_predict: int
    reye_predict: int
    predict_limit: int
    def __init__(self) -> None: ...
    @staticmethod
    def new_gaze_filter() -> KalmanFilter: ...
    @staticmethod
    def new_head_filter() -> KalmanFilter: ...
    def on_gaze(self, frame: GazeFrame) -> None: ...
    def tick(self) -> FilterFrame: ...

class TobiiECWrapper(TobiiEC):
    present: bool
    frame: int
    head_model: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def topics(self) -> Sequence[str]: ...
    def dispatch(self, topic: str, *args): ...
