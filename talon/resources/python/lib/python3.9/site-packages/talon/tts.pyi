from _typeshed import Incomplete
from talon.api import ffi as ffi, ffi_string as ffi_string, lib as lib
from talon.scripting import rctx as rctx
from types import TracebackType as TracebackType
from typing import List

def engines() -> List[str]: ...

class Channel:
    handle: Incomplete
    def __init__(self, engine: str = ...) -> None: ...
    def voices(self) -> List[str]: ...
    def locales(self) -> List[str]: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    def stop(self) -> None: ...
    def say(self, text: str) -> None: ...
    @property
    def locale(self) -> str: ...
    @locale.setter
    def locale(self, value: str) -> None: ...
    @property
    def voice(self) -> str: ...
    @voice.setter
    def voice(self, value: str) -> None: ...
    @property
    def pitch(self) -> float: ...
    @pitch.setter
    def pitch(self, value: float) -> None: ...
    @property
    def rate(self) -> float: ...
    @rate.setter
    def rate(self, value: float) -> None: ...
    @property
    def volume(self) -> float: ...
    @volume.setter
    def volume(self, value: float) -> None: ...
    @property
    def state(self) -> str: ...
    def __del__(self) -> None: ...

say: Incomplete
stop: Incomplete
voices: Incomplete
