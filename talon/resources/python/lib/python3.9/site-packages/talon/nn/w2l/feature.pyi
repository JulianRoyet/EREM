import torch.nn as nn
import torch
from _typeshed import Incomplete

def mel_to_hz(mel: float) -> float: ...
def hz_to_mel(hz: float) -> float: ...
def trifilter(sr: float, n_mel: int, n_fft: int) -> torch.Tensor: ...

class Mfsc(nn.Module):
    n_mel: Incomplete
    preem_coeff: Incomplete
    mel_floor: Incomplete
    frame_size: Incomplete
    frame_stride: Incomplete
    n_fft: Incomplete
    window: Incomplete
    trifilter: Incomplete
    filterlen: Incomplete
    def __init__(self, sr: int, n_mel: int, frame_size_ms: int, frame_stride_ms: int, *, mel_floor: float = ..., preem_coeff: float = ...) -> None: ...
    def forward(self, samples: torch.Tensor) -> torch.Tensor: ...
    def frame_signal(self, samples: torch.Tensor) -> torch.Tensor: ...
    def power_spectrum(self, frames: torch.Tensor) -> torch.Tensor: ...
    def normalize(self, frames: torch.Tensor) -> torch.Tensor: ...

class TorchMfsc(Mfsc):
    def power_spectrum(self, frames: torch.Tensor) -> torch.Tensor: ...
