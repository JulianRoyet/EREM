import io
import numpy as np
from _typeshed import Incomplete
from typing import BinaryIO, Dict, List, Union

array_to_py: Incomplete
np_to_array: Incomplete
py_to_array: Incomplete
array_sizes: Incomplete
I64: Incomplete
U64: Incomplete
F32: Incomplete

class Codec:
    stream: io.BufferedIOBase
    size: int
    def __init__(self, stream: io.BufferedIOBase) -> None: ...
    def read_bytes(self, size: int) -> bytes: ...
    def write_bytes(self, value: bytes) -> None: ...
    def read8(self) -> int: ...
    def read_uint64(self) -> int: ...
    def read_int64(self) -> int: ...
    def read_fp32(self) -> float: ...
    def write8(self, value: int) -> None: ...
    def write_uint64(self, value: int) -> None: ...
    def write_int64(self, value: int) -> None: ...
    def write_fp32(self, value: float) -> None: ...
    def read_short_string(self) -> str: ...
    def write_short_string(self, value: str) -> None: ...
    def read_long_string(self) -> str: ...
    def write_long_string(self, value: str) -> None: ...
    def read_array(self, version: int) -> np.ndarray: ...
    def write_array(self, value: np.ndarray, version: int) -> None: ...

class B2lLayer:
    arch: str
    params: list[np.ndarray]
    def __init__(self, arch: str, params: list[np.ndarray]) -> None: ...

class B2lSection:
    name: str
    type: str
    desc: str
    def __init__(self, name: str, version: int = ...) -> None: ...
    @classmethod
    def read_from(cls, codec: Codec, version: int = ...) -> B2lSection: ...
    def write_to(self, codec: Codec) -> None: ...
    @property
    def data(self) -> bytes: ...
    @data.setter
    def data(self, value: bytes) -> None: ...
    @property
    def utf8(self) -> str: ...
    @utf8.setter
    def utf8(self, value: str) -> None: ...
    @property
    def keyval(self) -> Dict[str, str]: ...
    @keyval.setter
    def keyval(self, value: Dict[str, str]) -> None: ...
    @property
    def layers(self) -> List[B2lLayer]: ...
    @layers.setter
    def layers(self, value: List[B2lLayer]) -> None: ...
    @property
    def array(self) -> np.ndarray: ...
    @array.setter
    def array(self, value: np.ndarray) -> None: ...

class B2lFile:
    sections: List[B2lSection]
    name: Incomplete
    version: Incomplete
    def __init__(self, name: str = ..., version: int = ...) -> None: ...
    def __contains__(self, name: str) -> bool: ...
    def section(self, name: str) -> B2lSection: ...
    def add_section(self, name: str) -> B2lSection: ...
    def remove_section(self, name: str) -> None: ...
    @classmethod
    def read_from(cls, codec: Codec) -> B2lFile: ...
    def write_to(self, codec: Codec): ...

def load(stream: Union[BinaryIO, io.BufferedIOBase]) -> B2lFile: ...
def dump(obj: B2lFile, stream: Union[BinaryIO, io.BufferedIOBase]) -> None: ...
