import threading
from .archivesize import get_archive_size as get_archive_size
from .download import downloader as downloader
from _typeshed import Incomplete
from enum import IntEnum
from talon import app as app, cron as cron, storage as storage
from talon.api import ffi as ffi, ffi_string as ffi_string, lib as lib
from talon.debug import log_exception as log_exception
from typing import Optional

class State(IntEnum):
    Idle: int
    Check: int
    Open: int
    Download: int
    Ready: int
    Install: int

class UpdateInfo:
    url: str
    version: str
    size: int
    sha256: str
    def __init__(self, url, version, size, sha256) -> None: ...

URL: str

class Updater:
    lock: threading.RLock
    state: State
    info: Optional[UpdateInfo]
    path: Optional[str]
    def __init__(self) -> None: ...
    def install(self) -> None: ...
    def check(self, *, auto: bool = ...) -> None: ...
    def cancel(self) -> None: ...

updater: Incomplete
