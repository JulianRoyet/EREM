from _typeshed import Incomplete
from typing import Iterator

def rot2d(x: float, y: float, degrees: float) -> tuple[float, float]: ...

class point:
    def op(self, func, p) -> None: ...
    def __add__(self, p): ...
    def __sub__(self, p): ...
    def __mul__(self, p): ...
    def __pow__(self, p): ...
    def __mod__(self, p): ...
    def __floordiv__(self, p): ...
    def __truediv__(self, p): ...
    __radd__: Incomplete
    __rsub__: Incomplete
    __rmul__: Incomplete
    def __rmod__(self, p): ...
    def __rfloordiv__(self, p): ...
    def __rtruediv__(self, p): ...
    def __abs__(self): ...
    def __neg__(self): ...
    def __trunc__(self): ...
    def __floor__(self): ...
    def __ceil__(self): ...
    def __round__(self, ndigits: int = ...): ...
    def __iter__(self) -> Iterator[float]: ...
    @property
    def __array_interface__(self): ...
    def len(self) -> int: ...
    def int(self) -> point: ...
    def zero(self) -> bool: ...

class Point2d(point):
    x: float
    y: float
    ts: Incomplete
    def __init__(self, x: float, y: float, *, ts: float = ...) -> None: ...
    def sum(self) -> float: ...
    def copy(self) -> Point2d: ...
    def as3d(self) -> Point3d: ...
    def as6d(self) -> Point6d: ...
    def dims(self) -> int: ...
    def degrees(self) -> float: ...
    def rot(self, angle) -> Point2d: ...
    def apply(self, func, *args, **kwargs) -> Point2d: ...
    def op(self, func, p) -> Point2d: ...
    def __eq__(self, p) -> bool: ...
    def __iter__(self) -> Iterator[float]: ...

class Point3d(point):
    x: float
    y: float
    z: float
    ts: float
    def __init__(self, x: float, y: float, z: float, *, ts: float = ...) -> None: ...
    def sum(self) -> float: ...
    def copy(self) -> Point3d: ...
    def as2d(self) -> Point2d: ...
    def as6d(self) -> Point6d: ...
    def dims(self) -> int: ...
    def rotx(self, angle: float) -> Point3d: ...
    def roty(self, angle: float) -> Point3d: ...
    def rotz(self, angle: float) -> Point3d: ...
    def apply(self, func, *args, **kwargs) -> Point3d: ...
    def op(self, func, p) -> Point3d: ...
    def __eq__(self, p): ...
    def __iter__(self) -> Iterator[float]: ...

class Point6d(point):
    x: float
    y: float
    z: float
    yaw: float
    pitch: float
    roll: float
    ts: float
    def __init__(self, x: float, y: float, z: float, *, yaw: float, pitch: float, roll: float, ts: float = ...) -> None: ...
    def sum(self) -> float: ...
    def copy(self) -> Point6d: ...
    def as3d(self) -> Point3d: ...
    def as3drot(self) -> Point3d: ...
    def as2d(self) -> Point2d: ...
    def as2drot(self) -> Point2d: ...
    def dims(self) -> int: ...
    def apply(self, func, *args, **kwargs) -> Point6d: ...
    def op(self, func, p) -> Point6d: ...
    def __eq__(self, p): ...
    def __iter__(self) -> Iterator[float]: ...
