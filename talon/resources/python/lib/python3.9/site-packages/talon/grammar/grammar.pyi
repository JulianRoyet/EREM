from _typeshed import Incomplete
from talon import cron as cron, metrics as metrics
from talon.grammar import rule as rule, vm as vm
from talon.grammar.dfa import NFA as NFA
from talon.grammar.parser import Node as Node
from talon.grammar.vm import State as State
from typing import Iterable, Optional

class GrammarError(Exception): ...

class Grammar:
    vm: Optional[vm.VM]
    lists: dict[str, set[str]]
    list_nfas: dict[str, NFA]
    rules: dict[str, tuple[rule.Rule, bool]]
    compiled: bool
    main_root: Optional[Node]
    enabled: bool
    exclusive: bool
    priority: int
    name: Incomplete
    grammar: Incomplete
    def __init__(self, name) -> None: ...
    def add_rule(self, name: str, rule: rule.Rule, public: bool = ...) -> None: ...
    def compile(self, main_rule: str): ...
    def parse(self, words: Iterable[str]) -> list[State]: ...
    def update_lists(self, lists: dict[str, Iterable[str]], partial: bool = ...) -> None: ...
