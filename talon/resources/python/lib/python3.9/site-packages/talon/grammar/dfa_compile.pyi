from . import parser as parser
from .dfa import AlphaWordModel as AlphaWordModel, NFA as NFA, WordModel as WordModel
from _typeshed import Incomplete
from collections import defaultdict as defaultdict
from typing import Dict, List, Set, Tuple

alpha_word_model: Incomplete

class DFARule:
    nfa: NFA
    rules: List[Tuple[str, int]]
    lists: List[Tuple[str, int]]
    word_model: WordModel
    def __init__(self, *, word_model: WordModel = ..., nfa: NFA = ...) -> None: ...
    @classmethod
    def compile(cls, root, word_model: WordModel = ...): ...
    def walk(self, prev_state: int, node) -> int: ...
    def link(self, nfa: NFA, prev_state: int, rules: Dict[str, 'DFARule'], lists: Dict[str, 'NFA'], stack: Set['DFARule']) -> None: ...

word_nfa: Incomplete
word_rule: Incomplete
phrase_nfa: Incomplete
phrase_rule: Incomplete
builtin_nfas: Dict[str, NFA]
builtin_rules: Dict[str, 'DFARule']
