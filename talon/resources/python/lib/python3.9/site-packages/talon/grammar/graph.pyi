from _typeshed import Incomplete
from graphviz import Digraph
from talon.grammar import Grammar as Grammar, parser as parser
from typing import Tuple

class GraphGrammar:
    rules: Incomplete
    lists: Incomplete
    nonce: int
    digraph: Incomplete
    def __init__(self) -> None: ...
    def next(self) -> str: ...
    def edge(self, *args, **kwargs) -> None: ...
    def node(self, *args, **kwargs) -> None: ...
    @classmethod
    def compile(cls, grammar: Grammar) -> Digraph: ...
    def walk(self, node) -> Tuple[str, str]: ...
