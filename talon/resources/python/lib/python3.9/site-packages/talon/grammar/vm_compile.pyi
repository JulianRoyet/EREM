from . import parser as parser, vm as vm
from .rule import Rule as Rule
from _typeshed import Incomplete
from typing import Dict, List, Set

class VMRule:
    alts: List[List[vm.Ins]]
    list_names: Set[str]
    @classmethod
    def compile(self, root, list_names: Incomplete | None = ...): ...
    def walk(self, node) -> List[vm.Ins]: ...

class VMGrammar:
    rules: Dict[str, List[vm.Ins]]
    list_names: Set[str]
    exports: Set[str]
    alts: List[List[vm.Ins]]
    def __init__(self) -> None: ...
    def add_rule(self, name, root, public: bool = ...) -> None: ...
    def compile(self, main_root) -> None: ...
    def find_first_words(self, alt): ...
