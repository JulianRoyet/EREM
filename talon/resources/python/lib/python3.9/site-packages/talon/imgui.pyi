import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from enum import IntEnum
from talon import app as app, canvas as canvas, cron as cron, ctrl as ctrl, screen as screen, settings as settings, skia as skia, ui as ui
from talon.scripting import rctx as rctx
from talon.types import Point2d as Point2d, Rect as Rect
from talon.ui import Screen as Screen
from typing import Any, Callable, Dict, Iterator, List, Optional, Set, Tuple, TypeVar, Union

class ClickState(IntEnum):
    NONE: int
    DOWN: int
    CLICK: int
    CANCEL: int

class SizeConstraint:
    def __add__(self, n: Any): ...
    def __sub__(self, n: Any): ...
    def __radd__(self, n: Any): ...
    def __rsub__(self, n: Any): ...
    def __lt__(self, other: Any): ...
    def __gt__(self, other: Any): ...
    def __call__(self, n: float) -> float: ...

class MaxConstraint(SizeConstraint):
    def __lt__(self, other: Any): ...
    def __gt__(self, other: Any): ...
    def __call__(self, n: float) -> float: ...

Max: Incomplete
SizeValue = Union[float, SizeConstraint]

class Size:
    width: SizeValue
    height: SizeValue
    def __add__(self, n: Any) -> Size: ...
    def __sub__(self, n: Any) -> Size: ...
    def constrain(self, width: float, height: float) -> Tuple[float, float]: ...
    @classmethod
    def max(cls, a: Size, b: Size) -> Size: ...
    @classmethod
    def min(cls, a: Size, b: Size) -> Size: ...
    def __init__(self, width, height) -> None: ...

ZeroSize: Incomplete
MaxSize: Incomplete
CallableT = TypeVar('CallableT', bound=Callable)

class State:
    key_buffer: List[canvas.KeyEvent]
    mouse_buffer: List[canvas.MouseEvent]
    scroll_buffer: List[canvas.ScrollEvent]
    widgets: Dict[str, 'Widget']
    root: Widget
    current: Layout
    gui: GUI
    canvas: skia.Canvas
    layout: Dict['Widget', Rect]
    old: Optional['State']
    rect: Rect
    scale: float
    dark_mode: bool
    hover: Optional['Widget']
    active: Optional['Widget']
    pos: Point2d
    buttons: Set[int]
    paint: Incomplete
    nonce: Incomplete
    drag_anchor: Incomplete
    drag_rect: Incomplete
    def __init__(self, gui: GUI, old: State = ...) -> None: ...
    def hit(self, widget: Widget, *, rect: Rect = ..., pos: Point2d = ...) -> bool: ...
    def clicked(self, widget: Widget, *, button: int = ..., rect: Rect = ...) -> ClickState: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @classmethod
    def memoize(cls, fn: CallableT) -> CallableT: ...

class Widget(ABC, metaclass=abc.ABCMeta):
    id: str
    def update(self, state: State, **kwargs) -> None: ...
    @abstractmethod
    def size(self, state: State) -> Size: ...
    @abstractmethod
    def draw(self, state: State, rect: Rect) -> None: ...
    def height(self, state: State, width: float, old_height: float) -> float: ...
    def layout(self, state: State, rect: Rect) -> None: ...
    @property
    def dirty(self) -> bool: ...
    @dirty.setter
    def dirty(self, value: bool) -> None: ...
WidgetT = TypeVar('WidgetT', bound=Widget)

class Layout(Widget, ABC, metaclass=abc.ABCMeta):
    children: List[Widget]
    def __new__(cls, *args, **kwargs): ...
    @property
    def dirty(self) -> bool: ...
    @dirty.setter
    def dirty(self, value: bool) -> None: ...
    def add_child(self, widget: Widget) -> None: ...
    @abstractmethod
    def size(self, state: State): ...
    def draw(self, state: State, rect: Rect) -> None: ...

class VerticalLayout(Layout):
    margin: float
    spacing: float
    def size(self, state: State) -> Size: ...
    def layout(self, state: State, rect: Rect) -> None: ...

class HorizontalLayout(Layout):
    margin: float
    spacing: float
    def size(self, state: State) -> Size: ...
    def layout(self, state: State, rect: Rect) -> None: ...

class FixedLayout(Layout):
    x: Incomplete
    y: Incomplete
    def __init__(self, x: float, y: float) -> None: ...
    def size(self, state: State) -> Size: ...
    def layout(self, state: State, rect: Rect) -> None: ...

class Text(Widget):
    pad: int
    text: str
    dirty: Incomplete
    def update(self, state: State, **kwargs): ...
    def size(self, state: State) -> Size: ...
    def draw(self, state: State, rect: Rect, color: str = ...) -> None: ...

class HSpacer(Widget):
    def size(self, state: State) -> Size: ...
    def draw(self, state: State, rect: Rect) -> None: ...

class HLine(HSpacer):
    pad: float
    stroke_width: float
    def draw(self, state: State, rect: Rect) -> None: ...

class Canvas(Widget):
    fn: Incomplete
    dirty: bool
    def update(self, state: State, **kwargs): ...
    def size(self, state: State) -> Size: ...
    def draw(self, state: State, rect: Rect) -> None: ...

class Button(Widget):
    border: float
    pad: float
    text: Incomplete
    hover_state: bool
    click_state: Incomplete
    def __init__(self) -> None: ...
    dirty: Incomplete
    def update(self, state: State, **kwargs): ...
    def size(self, state: State) -> Size: ...
    @property
    def down(self) -> bool: ...
    @property
    def up(self) -> bool: ...
    @property
    def clicked(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def draw(self, state: State, rect: Rect) -> None: ...

class Slider(Widget):
    diameter: float
    radius: Incomplete
    margin: float
    defaults: Incomplete
    init: bool
    value: float
    min: float
    max: float
    hover: bool
    state: Incomplete
    click_base: Incomplete
    click_value: float
    def __init__(self) -> None: ...
    dirty: bool
    def update(self, state: State, **kwargs): ...
    def size(self, state: State) -> Size: ...
    def draw(self, state: State, rect: Rect) -> None: ...

UpdateFunc: Incomplete

class GUI:
    x: Optional[float]
    y: Optional[float]
    width: Optional[float]
    height: Optional[float]
    @classmethod
    def open(cls, *, x: float = ..., y: float = ..., w: float = ..., h: float = ..., rect: Rect = ..., screen: Screen = ..., **kwargs) -> Callable[[UpdateFunc], 'GUI']: ...
    def __init__(self, x: Optional[float], y: Optional[float], width: Optional[float], height: Optional[float], update: UpdateFunc, *, hidden: bool = ..., draggable: bool = ..., focused: bool = ..., software: bool = ..., backend: str = ...) -> None: ...
    @property
    def showing(self): ...
    def show(self) -> None: ...
    def freeze(self) -> None: ...
    def hide(self) -> None: ...
    def button(self, name: str, _id: str = ...) -> Button: ...
    def text(self, text: str) -> Text: ...
    def slider(self, min: float, value: float, max: float, _id: str = ...) -> Slider: ...
    def spacer(self) -> HSpacer: ...
    def line(self) -> HLine: ...
    def canvas(self, fn) -> Canvas: ...
    def vertical(self) -> Iterator[None]: ...
    def horizontal(self) -> Iterator[None]: ...
    def fixed(self, x: float, y: float) -> Iterator[None]: ...
    def keydown(self, name: str) -> bool: ...

open: Incomplete
